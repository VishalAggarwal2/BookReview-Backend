
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model BookReview
 * 
 */
export type BookReview = $Result.DefaultSelection<Prisma.$BookReviewPayload>
/**
 * Model LibraryTeam
 * 
 */
export type LibraryTeam = $Result.DefaultSelection<Prisma.$LibraryTeamPayload>
/**
 * Model RejectionMessage
 * 
 */
export type RejectionMessage = $Result.DefaultSelection<Prisma.$RejectionMessagePayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Like
 * 
 */
export type Like = $Result.DefaultSelection<Prisma.$LikePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.bookReview`: Exposes CRUD operations for the **BookReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookReviews
    * const bookReviews = await prisma.bookReview.findMany()
    * ```
    */
  get bookReview(): Prisma.BookReviewDelegate<ExtArgs>;

  /**
   * `prisma.libraryTeam`: Exposes CRUD operations for the **LibraryTeam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LibraryTeams
    * const libraryTeams = await prisma.libraryTeam.findMany()
    * ```
    */
  get libraryTeam(): Prisma.LibraryTeamDelegate<ExtArgs>;

  /**
   * `prisma.rejectionMessage`: Exposes CRUD operations for the **RejectionMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RejectionMessages
    * const rejectionMessages = await prisma.rejectionMessage.findMany()
    * ```
    */
  get rejectionMessage(): Prisma.RejectionMessageDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.like`: Exposes CRUD operations for the **Like** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.like.findMany()
    * ```
    */
  get like(): Prisma.LikeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.1
   * Query Engine version: 5675a3182f972f1a8f31d16eee6abf4fd54910e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    BookReview: 'BookReview',
    LibraryTeam: 'LibraryTeam',
    RejectionMessage: 'RejectionMessage',
    Comment: 'Comment',
    Like: 'Like'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'bookReview' | 'libraryTeam' | 'rejectionMessage' | 'comment' | 'like'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      BookReview: {
        payload: Prisma.$BookReviewPayload<ExtArgs>
        fields: Prisma.BookReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookReviewFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookReviewFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookReviewPayload>
          }
          findFirst: {
            args: Prisma.BookReviewFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookReviewFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookReviewPayload>
          }
          findMany: {
            args: Prisma.BookReviewFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookReviewPayload>[]
          }
          create: {
            args: Prisma.BookReviewCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookReviewPayload>
          }
          createMany: {
            args: Prisma.BookReviewCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookReviewCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookReviewPayload>[]
          }
          delete: {
            args: Prisma.BookReviewDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookReviewPayload>
          }
          update: {
            args: Prisma.BookReviewUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookReviewPayload>
          }
          deleteMany: {
            args: Prisma.BookReviewDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BookReviewUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BookReviewUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookReviewPayload>
          }
          aggregate: {
            args: Prisma.BookReviewAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBookReview>
          }
          groupBy: {
            args: Prisma.BookReviewGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BookReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookReviewCountArgs<ExtArgs>,
            result: $Utils.Optional<BookReviewCountAggregateOutputType> | number
          }
        }
      }
      LibraryTeam: {
        payload: Prisma.$LibraryTeamPayload<ExtArgs>
        fields: Prisma.LibraryTeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LibraryTeamFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LibraryTeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LibraryTeamFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LibraryTeamPayload>
          }
          findFirst: {
            args: Prisma.LibraryTeamFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LibraryTeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LibraryTeamFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LibraryTeamPayload>
          }
          findMany: {
            args: Prisma.LibraryTeamFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LibraryTeamPayload>[]
          }
          create: {
            args: Prisma.LibraryTeamCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LibraryTeamPayload>
          }
          createMany: {
            args: Prisma.LibraryTeamCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LibraryTeamCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LibraryTeamPayload>[]
          }
          delete: {
            args: Prisma.LibraryTeamDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LibraryTeamPayload>
          }
          update: {
            args: Prisma.LibraryTeamUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LibraryTeamPayload>
          }
          deleteMany: {
            args: Prisma.LibraryTeamDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LibraryTeamUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LibraryTeamUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LibraryTeamPayload>
          }
          aggregate: {
            args: Prisma.LibraryTeamAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLibraryTeam>
          }
          groupBy: {
            args: Prisma.LibraryTeamGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LibraryTeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.LibraryTeamCountArgs<ExtArgs>,
            result: $Utils.Optional<LibraryTeamCountAggregateOutputType> | number
          }
        }
      }
      RejectionMessage: {
        payload: Prisma.$RejectionMessagePayload<ExtArgs>
        fields: Prisma.RejectionMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RejectionMessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RejectionMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RejectionMessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RejectionMessagePayload>
          }
          findFirst: {
            args: Prisma.RejectionMessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RejectionMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RejectionMessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RejectionMessagePayload>
          }
          findMany: {
            args: Prisma.RejectionMessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RejectionMessagePayload>[]
          }
          create: {
            args: Prisma.RejectionMessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RejectionMessagePayload>
          }
          createMany: {
            args: Prisma.RejectionMessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RejectionMessageCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RejectionMessagePayload>[]
          }
          delete: {
            args: Prisma.RejectionMessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RejectionMessagePayload>
          }
          update: {
            args: Prisma.RejectionMessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RejectionMessagePayload>
          }
          deleteMany: {
            args: Prisma.RejectionMessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RejectionMessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RejectionMessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RejectionMessagePayload>
          }
          aggregate: {
            args: Prisma.RejectionMessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRejectionMessage>
          }
          groupBy: {
            args: Prisma.RejectionMessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RejectionMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.RejectionMessageCountArgs<ExtArgs>,
            result: $Utils.Optional<RejectionMessageCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Like: {
        payload: Prisma.$LikePayload<ExtArgs>
        fields: Prisma.LikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findFirst: {
            args: Prisma.LikeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          findMany: {
            args: Prisma.LikeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          create: {
            args: Prisma.LikeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          createMany: {
            args: Prisma.LikeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LikeCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikePayload>[]
          }
          delete: {
            args: Prisma.LikeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          update: {
            args: Prisma.LikeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          deleteMany: {
            args: Prisma.LikeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LikeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LikeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LikePayload>
          }
          aggregate: {
            args: Prisma.LikeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLike>
          }
          groupBy: {
            args: Prisma.LikeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikeCountArgs<ExtArgs>,
            result: $Utils.Optional<LikeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    bookReviews: number
    libraryTeam: number
    comments: number
    likes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookReviews?: boolean | UserCountOutputTypeCountBookReviewsArgs
    libraryTeam?: boolean | UserCountOutputTypeCountLibraryTeamArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    likes?: boolean | UserCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLibraryTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LibraryTeamWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }


  /**
   * Count Type BookReviewCountOutputType
   */

  export type BookReviewCountOutputType = {
    rejectionMessages: number
    comments: number
    likes: number
  }

  export type BookReviewCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rejectionMessages?: boolean | BookReviewCountOutputTypeCountRejectionMessagesArgs
    comments?: boolean | BookReviewCountOutputTypeCountCommentsArgs
    likes?: boolean | BookReviewCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * BookReviewCountOutputType without action
   */
  export type BookReviewCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookReviewCountOutputType
     */
    select?: BookReviewCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BookReviewCountOutputType without action
   */
  export type BookReviewCountOutputTypeCountRejectionMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RejectionMessageWhereInput
  }

  /**
   * BookReviewCountOutputType without action
   */
  export type BookReviewCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * BookReviewCountOutputType without action
   */
  export type BookReviewCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
  }


  /**
   * Count Type LibraryTeamCountOutputType
   */

  export type LibraryTeamCountOutputType = {
    rejectionMessages: number
  }

  export type LibraryTeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rejectionMessages?: boolean | LibraryTeamCountOutputTypeCountRejectionMessagesArgs
  }

  // Custom InputTypes
  /**
   * LibraryTeamCountOutputType without action
   */
  export type LibraryTeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryTeamCountOutputType
     */
    select?: LibraryTeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LibraryTeamCountOutputType without action
   */
  export type LibraryTeamCountOutputTypeCountRejectionMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RejectionMessageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    userId: string | null
    firstName: string | null
    email: string | null
    imageUrl: string | null
  }

  export type UserMaxAggregateOutputType = {
    userId: string | null
    firstName: string | null
    email: string | null
    imageUrl: string | null
  }

  export type UserCountAggregateOutputType = {
    userId: number
    firstName: number
    email: number
    imageUrl: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    userId?: true
    firstName?: true
    email?: true
    imageUrl?: true
  }

  export type UserMaxAggregateInputType = {
    userId?: true
    firstName?: true
    email?: true
    imageUrl?: true
  }

  export type UserCountAggregateInputType = {
    userId?: true
    firstName?: true
    email?: true
    imageUrl?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    userId: string
    firstName: string
    email: string
    imageUrl: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    firstName?: boolean
    email?: boolean
    imageUrl?: boolean
    bookReviews?: boolean | User$bookReviewsArgs<ExtArgs>
    libraryTeam?: boolean | User$libraryTeamArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    firstName?: boolean
    email?: boolean
    imageUrl?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    userId?: boolean
    firstName?: boolean
    email?: boolean
    imageUrl?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookReviews?: boolean | User$bookReviewsArgs<ExtArgs>
    libraryTeam?: boolean | User$libraryTeamArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      bookReviews: Prisma.$BookReviewPayload<ExtArgs>[]
      libraryTeam: Prisma.$LibraryTeamPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      firstName: string
      email: string
      imageUrl: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userWithUserIdOnly = await prisma.user.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `userId`
     * const userWithUserIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    bookReviews<T extends User$bookReviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$bookReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    libraryTeam<T extends User$libraryTeamArgs<ExtArgs> = {}>(args?: Subset<T, User$libraryTeamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibraryTeamPayload<ExtArgs>, T, 'findMany'> | Null>;

    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    likes<T extends User$likesArgs<ExtArgs> = {}>(args?: Subset<T, User$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly userId: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly imageUrl: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.bookReviews
   */
  export type User$bookReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookReview
     */
    select?: BookReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookReviewInclude<ExtArgs> | null
    where?: BookReviewWhereInput
    orderBy?: BookReviewOrderByWithRelationInput | BookReviewOrderByWithRelationInput[]
    cursor?: BookReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookReviewScalarFieldEnum | BookReviewScalarFieldEnum[]
  }

  /**
   * User.libraryTeam
   */
  export type User$libraryTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryTeam
     */
    select?: LibraryTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryTeamInclude<ExtArgs> | null
    where?: LibraryTeamWhereInput
    orderBy?: LibraryTeamOrderByWithRelationInput | LibraryTeamOrderByWithRelationInput[]
    cursor?: LibraryTeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LibraryTeamScalarFieldEnum | LibraryTeamScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.likes
   */
  export type User$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model BookReview
   */

  export type AggregateBookReview = {
    _count: BookReviewCountAggregateOutputType | null
    _avg: BookReviewAvgAggregateOutputType | null
    _sum: BookReviewSumAggregateOutputType | null
    _min: BookReviewMinAggregateOutputType | null
    _max: BookReviewMaxAggregateOutputType | null
  }

  export type BookReviewAvgAggregateOutputType = {
    reviewId: number | null
    likeCount: number | null
  }

  export type BookReviewSumAggregateOutputType = {
    reviewId: number | null
    likeCount: number | null
  }

  export type BookReviewMinAggregateOutputType = {
    reviewId: number | null
    bookName: string | null
    bookDsc: string | null
    bookType: string | null
    bookReview: string | null
    bookImageUrl: string | null
    presentAtLibrary: boolean | null
    referenceNumber: string | null
    bookReviewByLcMember: boolean | null
    isValidated: boolean | null
    isRejected: boolean | null
    userId: string | null
    likeCount: number | null
  }

  export type BookReviewMaxAggregateOutputType = {
    reviewId: number | null
    bookName: string | null
    bookDsc: string | null
    bookType: string | null
    bookReview: string | null
    bookImageUrl: string | null
    presentAtLibrary: boolean | null
    referenceNumber: string | null
    bookReviewByLcMember: boolean | null
    isValidated: boolean | null
    isRejected: boolean | null
    userId: string | null
    likeCount: number | null
  }

  export type BookReviewCountAggregateOutputType = {
    reviewId: number
    bookName: number
    bookDsc: number
    bookType: number
    bookReview: number
    bookImageUrl: number
    presentAtLibrary: number
    referenceNumber: number
    bookReviewByLcMember: number
    isValidated: number
    isRejected: number
    userId: number
    likeCount: number
    _all: number
  }


  export type BookReviewAvgAggregateInputType = {
    reviewId?: true
    likeCount?: true
  }

  export type BookReviewSumAggregateInputType = {
    reviewId?: true
    likeCount?: true
  }

  export type BookReviewMinAggregateInputType = {
    reviewId?: true
    bookName?: true
    bookDsc?: true
    bookType?: true
    bookReview?: true
    bookImageUrl?: true
    presentAtLibrary?: true
    referenceNumber?: true
    bookReviewByLcMember?: true
    isValidated?: true
    isRejected?: true
    userId?: true
    likeCount?: true
  }

  export type BookReviewMaxAggregateInputType = {
    reviewId?: true
    bookName?: true
    bookDsc?: true
    bookType?: true
    bookReview?: true
    bookImageUrl?: true
    presentAtLibrary?: true
    referenceNumber?: true
    bookReviewByLcMember?: true
    isValidated?: true
    isRejected?: true
    userId?: true
    likeCount?: true
  }

  export type BookReviewCountAggregateInputType = {
    reviewId?: true
    bookName?: true
    bookDsc?: true
    bookType?: true
    bookReview?: true
    bookImageUrl?: true
    presentAtLibrary?: true
    referenceNumber?: true
    bookReviewByLcMember?: true
    isValidated?: true
    isRejected?: true
    userId?: true
    likeCount?: true
    _all?: true
  }

  export type BookReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookReview to aggregate.
     */
    where?: BookReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookReviews to fetch.
     */
    orderBy?: BookReviewOrderByWithRelationInput | BookReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookReviews
    **/
    _count?: true | BookReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookReviewMaxAggregateInputType
  }

  export type GetBookReviewAggregateType<T extends BookReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateBookReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookReview[P]>
      : GetScalarType<T[P], AggregateBookReview[P]>
  }




  export type BookReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookReviewWhereInput
    orderBy?: BookReviewOrderByWithAggregationInput | BookReviewOrderByWithAggregationInput[]
    by: BookReviewScalarFieldEnum[] | BookReviewScalarFieldEnum
    having?: BookReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookReviewCountAggregateInputType | true
    _avg?: BookReviewAvgAggregateInputType
    _sum?: BookReviewSumAggregateInputType
    _min?: BookReviewMinAggregateInputType
    _max?: BookReviewMaxAggregateInputType
  }

  export type BookReviewGroupByOutputType = {
    reviewId: number
    bookName: string
    bookDsc: string
    bookType: string
    bookReview: string
    bookImageUrl: string | null
    presentAtLibrary: boolean
    referenceNumber: string | null
    bookReviewByLcMember: boolean
    isValidated: boolean
    isRejected: boolean
    userId: string
    likeCount: number
    _count: BookReviewCountAggregateOutputType | null
    _avg: BookReviewAvgAggregateOutputType | null
    _sum: BookReviewSumAggregateOutputType | null
    _min: BookReviewMinAggregateOutputType | null
    _max: BookReviewMaxAggregateOutputType | null
  }

  type GetBookReviewGroupByPayload<T extends BookReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookReviewGroupByOutputType[P]>
            : GetScalarType<T[P], BookReviewGroupByOutputType[P]>
        }
      >
    >


  export type BookReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    reviewId?: boolean
    bookName?: boolean
    bookDsc?: boolean
    bookType?: boolean
    bookReview?: boolean
    bookImageUrl?: boolean
    presentAtLibrary?: boolean
    referenceNumber?: boolean
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    userId?: boolean
    likeCount?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    rejectionMessages?: boolean | BookReview$rejectionMessagesArgs<ExtArgs>
    comments?: boolean | BookReview$commentsArgs<ExtArgs>
    likes?: boolean | BookReview$likesArgs<ExtArgs>
    _count?: boolean | BookReviewCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookReview"]>

  export type BookReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    reviewId?: boolean
    bookName?: boolean
    bookDsc?: boolean
    bookType?: boolean
    bookReview?: boolean
    bookImageUrl?: boolean
    presentAtLibrary?: boolean
    referenceNumber?: boolean
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    userId?: boolean
    likeCount?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookReview"]>

  export type BookReviewSelectScalar = {
    reviewId?: boolean
    bookName?: boolean
    bookDsc?: boolean
    bookType?: boolean
    bookReview?: boolean
    bookImageUrl?: boolean
    presentAtLibrary?: boolean
    referenceNumber?: boolean
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    userId?: boolean
    likeCount?: boolean
  }

  export type BookReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    rejectionMessages?: boolean | BookReview$rejectionMessagesArgs<ExtArgs>
    comments?: boolean | BookReview$commentsArgs<ExtArgs>
    likes?: boolean | BookReview$likesArgs<ExtArgs>
    _count?: boolean | BookReviewCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BookReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BookReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookReview"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      rejectionMessages: Prisma.$RejectionMessagePayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      likes: Prisma.$LikePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      reviewId: number
      bookName: string
      bookDsc: string
      bookType: string
      bookReview: string
      bookImageUrl: string | null
      presentAtLibrary: boolean
      referenceNumber: string | null
      bookReviewByLcMember: boolean
      isValidated: boolean
      isRejected: boolean
      userId: string
      likeCount: number
    }, ExtArgs["result"]["bookReview"]>
    composites: {}
  }

  type BookReviewGetPayload<S extends boolean | null | undefined | BookReviewDefaultArgs> = $Result.GetResult<Prisma.$BookReviewPayload, S>

  type BookReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BookReviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BookReviewCountAggregateInputType | true
    }

  export interface BookReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookReview'], meta: { name: 'BookReview' } }
    /**
     * Find zero or one BookReview that matches the filter.
     * @param {BookReviewFindUniqueArgs} args - Arguments to find a BookReview
     * @example
     * // Get one BookReview
     * const bookReview = await prisma.bookReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookReviewFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BookReviewFindUniqueArgs<ExtArgs>>
    ): Prisma__BookReviewClient<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BookReview that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BookReviewFindUniqueOrThrowArgs} args - Arguments to find a BookReview
     * @example
     * // Get one BookReview
     * const bookReview = await prisma.bookReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookReviewFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BookReviewFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BookReviewClient<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BookReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookReviewFindFirstArgs} args - Arguments to find a BookReview
     * @example
     * // Get one BookReview
     * const bookReview = await prisma.bookReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookReviewFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BookReviewFindFirstArgs<ExtArgs>>
    ): Prisma__BookReviewClient<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BookReview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookReviewFindFirstOrThrowArgs} args - Arguments to find a BookReview
     * @example
     * // Get one BookReview
     * const bookReview = await prisma.bookReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookReviewFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BookReviewFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BookReviewClient<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BookReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookReviews
     * const bookReviews = await prisma.bookReview.findMany()
     * 
     * // Get first 10 BookReviews
     * const bookReviews = await prisma.bookReview.findMany({ take: 10 })
     * 
     * // Only select the `reviewId`
     * const bookReviewWithReviewIdOnly = await prisma.bookReview.findMany({ select: { reviewId: true } })
     * 
    **/
    findMany<T extends BookReviewFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookReviewFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BookReview.
     * @param {BookReviewCreateArgs} args - Arguments to create a BookReview.
     * @example
     * // Create one BookReview
     * const BookReview = await prisma.bookReview.create({
     *   data: {
     *     // ... data to create a BookReview
     *   }
     * })
     * 
    **/
    create<T extends BookReviewCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BookReviewCreateArgs<ExtArgs>>
    ): Prisma__BookReviewClient<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BookReviews.
     * @param {BookReviewCreateManyArgs} args - Arguments to create many BookReviews.
     * @example
     * // Create many BookReviews
     * const bookReview = await prisma.bookReview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends BookReviewCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookReviewCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BookReviews and returns the data saved in the database.
     * @param {BookReviewCreateManyAndReturnArgs} args - Arguments to create many BookReviews.
     * @example
     * // Create many BookReviews
     * const bookReview = await prisma.bookReview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BookReviews and only return the `reviewId`
     * const bookReviewWithReviewIdOnly = await prisma.bookReview.createManyAndReturn({ 
     *   select: { reviewId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends BookReviewCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, BookReviewCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a BookReview.
     * @param {BookReviewDeleteArgs} args - Arguments to delete one BookReview.
     * @example
     * // Delete one BookReview
     * const BookReview = await prisma.bookReview.delete({
     *   where: {
     *     // ... filter to delete one BookReview
     *   }
     * })
     * 
    **/
    delete<T extends BookReviewDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BookReviewDeleteArgs<ExtArgs>>
    ): Prisma__BookReviewClient<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BookReview.
     * @param {BookReviewUpdateArgs} args - Arguments to update one BookReview.
     * @example
     * // Update one BookReview
     * const bookReview = await prisma.bookReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookReviewUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BookReviewUpdateArgs<ExtArgs>>
    ): Prisma__BookReviewClient<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BookReviews.
     * @param {BookReviewDeleteManyArgs} args - Arguments to filter BookReviews to delete.
     * @example
     * // Delete a few BookReviews
     * const { count } = await prisma.bookReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookReviewDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookReviewDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookReviews
     * const bookReview = await prisma.bookReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookReviewUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BookReviewUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BookReview.
     * @param {BookReviewUpsertArgs} args - Arguments to update or create a BookReview.
     * @example
     * // Update or create a BookReview
     * const bookReview = await prisma.bookReview.upsert({
     *   create: {
     *     // ... data to create a BookReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookReview we want to update
     *   }
     * })
    **/
    upsert<T extends BookReviewUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BookReviewUpsertArgs<ExtArgs>>
    ): Prisma__BookReviewClient<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BookReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookReviewCountArgs} args - Arguments to filter BookReviews to count.
     * @example
     * // Count the number of BookReviews
     * const count = await prisma.bookReview.count({
     *   where: {
     *     // ... the filter for the BookReviews we want to count
     *   }
     * })
    **/
    count<T extends BookReviewCountArgs>(
      args?: Subset<T, BookReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookReviewAggregateArgs>(args: Subset<T, BookReviewAggregateArgs>): Prisma.PrismaPromise<GetBookReviewAggregateType<T>>

    /**
     * Group by BookReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookReviewGroupByArgs['orderBy'] }
        : { orderBy?: BookReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookReview model
   */
  readonly fields: BookReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    rejectionMessages<T extends BookReview$rejectionMessagesArgs<ExtArgs> = {}>(args?: Subset<T, BookReview$rejectionMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RejectionMessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    comments<T extends BookReview$commentsArgs<ExtArgs> = {}>(args?: Subset<T, BookReview$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    likes<T extends BookReview$likesArgs<ExtArgs> = {}>(args?: Subset<T, BookReview$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BookReview model
   */ 
  interface BookReviewFieldRefs {
    readonly reviewId: FieldRef<"BookReview", 'Int'>
    readonly bookName: FieldRef<"BookReview", 'String'>
    readonly bookDsc: FieldRef<"BookReview", 'String'>
    readonly bookType: FieldRef<"BookReview", 'String'>
    readonly bookReview: FieldRef<"BookReview", 'String'>
    readonly bookImageUrl: FieldRef<"BookReview", 'String'>
    readonly presentAtLibrary: FieldRef<"BookReview", 'Boolean'>
    readonly referenceNumber: FieldRef<"BookReview", 'String'>
    readonly bookReviewByLcMember: FieldRef<"BookReview", 'Boolean'>
    readonly isValidated: FieldRef<"BookReview", 'Boolean'>
    readonly isRejected: FieldRef<"BookReview", 'Boolean'>
    readonly userId: FieldRef<"BookReview", 'String'>
    readonly likeCount: FieldRef<"BookReview", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BookReview findUnique
   */
  export type BookReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookReview
     */
    select?: BookReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookReviewInclude<ExtArgs> | null
    /**
     * Filter, which BookReview to fetch.
     */
    where: BookReviewWhereUniqueInput
  }

  /**
   * BookReview findUniqueOrThrow
   */
  export type BookReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookReview
     */
    select?: BookReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookReviewInclude<ExtArgs> | null
    /**
     * Filter, which BookReview to fetch.
     */
    where: BookReviewWhereUniqueInput
  }

  /**
   * BookReview findFirst
   */
  export type BookReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookReview
     */
    select?: BookReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookReviewInclude<ExtArgs> | null
    /**
     * Filter, which BookReview to fetch.
     */
    where?: BookReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookReviews to fetch.
     */
    orderBy?: BookReviewOrderByWithRelationInput | BookReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookReviews.
     */
    cursor?: BookReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookReviews.
     */
    distinct?: BookReviewScalarFieldEnum | BookReviewScalarFieldEnum[]
  }

  /**
   * BookReview findFirstOrThrow
   */
  export type BookReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookReview
     */
    select?: BookReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookReviewInclude<ExtArgs> | null
    /**
     * Filter, which BookReview to fetch.
     */
    where?: BookReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookReviews to fetch.
     */
    orderBy?: BookReviewOrderByWithRelationInput | BookReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookReviews.
     */
    cursor?: BookReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookReviews.
     */
    distinct?: BookReviewScalarFieldEnum | BookReviewScalarFieldEnum[]
  }

  /**
   * BookReview findMany
   */
  export type BookReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookReview
     */
    select?: BookReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookReviewInclude<ExtArgs> | null
    /**
     * Filter, which BookReviews to fetch.
     */
    where?: BookReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookReviews to fetch.
     */
    orderBy?: BookReviewOrderByWithRelationInput | BookReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookReviews.
     */
    cursor?: BookReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookReviews.
     */
    skip?: number
    distinct?: BookReviewScalarFieldEnum | BookReviewScalarFieldEnum[]
  }

  /**
   * BookReview create
   */
  export type BookReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookReview
     */
    select?: BookReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a BookReview.
     */
    data: XOR<BookReviewCreateInput, BookReviewUncheckedCreateInput>
  }

  /**
   * BookReview createMany
   */
  export type BookReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookReviews.
     */
    data: BookReviewCreateManyInput | BookReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BookReview createManyAndReturn
   */
  export type BookReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookReview
     */
    select?: BookReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BookReviews.
     */
    data: BookReviewCreateManyInput | BookReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookReview update
   */
  export type BookReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookReview
     */
    select?: BookReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a BookReview.
     */
    data: XOR<BookReviewUpdateInput, BookReviewUncheckedUpdateInput>
    /**
     * Choose, which BookReview to update.
     */
    where: BookReviewWhereUniqueInput
  }

  /**
   * BookReview updateMany
   */
  export type BookReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookReviews.
     */
    data: XOR<BookReviewUpdateManyMutationInput, BookReviewUncheckedUpdateManyInput>
    /**
     * Filter which BookReviews to update
     */
    where?: BookReviewWhereInput
  }

  /**
   * BookReview upsert
   */
  export type BookReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookReview
     */
    select?: BookReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the BookReview to update in case it exists.
     */
    where: BookReviewWhereUniqueInput
    /**
     * In case the BookReview found by the `where` argument doesn't exist, create a new BookReview with this data.
     */
    create: XOR<BookReviewCreateInput, BookReviewUncheckedCreateInput>
    /**
     * In case the BookReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookReviewUpdateInput, BookReviewUncheckedUpdateInput>
  }

  /**
   * BookReview delete
   */
  export type BookReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookReview
     */
    select?: BookReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookReviewInclude<ExtArgs> | null
    /**
     * Filter which BookReview to delete.
     */
    where: BookReviewWhereUniqueInput
  }

  /**
   * BookReview deleteMany
   */
  export type BookReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookReviews to delete
     */
    where?: BookReviewWhereInput
  }

  /**
   * BookReview.rejectionMessages
   */
  export type BookReview$rejectionMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RejectionMessage
     */
    select?: RejectionMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RejectionMessageInclude<ExtArgs> | null
    where?: RejectionMessageWhereInput
    orderBy?: RejectionMessageOrderByWithRelationInput | RejectionMessageOrderByWithRelationInput[]
    cursor?: RejectionMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RejectionMessageScalarFieldEnum | RejectionMessageScalarFieldEnum[]
  }

  /**
   * BookReview.comments
   */
  export type BookReview$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * BookReview.likes
   */
  export type BookReview$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * BookReview without action
   */
  export type BookReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookReview
     */
    select?: BookReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookReviewInclude<ExtArgs> | null
  }


  /**
   * Model LibraryTeam
   */

  export type AggregateLibraryTeam = {
    _count: LibraryTeamCountAggregateOutputType | null
    _avg: LibraryTeamAvgAggregateOutputType | null
    _sum: LibraryTeamSumAggregateOutputType | null
    _min: LibraryTeamMinAggregateOutputType | null
    _max: LibraryTeamMaxAggregateOutputType | null
  }

  export type LibraryTeamAvgAggregateOutputType = {
    id: number | null
  }

  export type LibraryTeamSumAggregateOutputType = {
    id: number | null
  }

  export type LibraryTeamMinAggregateOutputType = {
    id: number | null
    userId: string | null
  }

  export type LibraryTeamMaxAggregateOutputType = {
    id: number | null
    userId: string | null
  }

  export type LibraryTeamCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type LibraryTeamAvgAggregateInputType = {
    id?: true
  }

  export type LibraryTeamSumAggregateInputType = {
    id?: true
  }

  export type LibraryTeamMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type LibraryTeamMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type LibraryTeamCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type LibraryTeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LibraryTeam to aggregate.
     */
    where?: LibraryTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryTeams to fetch.
     */
    orderBy?: LibraryTeamOrderByWithRelationInput | LibraryTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LibraryTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LibraryTeams
    **/
    _count?: true | LibraryTeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LibraryTeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LibraryTeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibraryTeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibraryTeamMaxAggregateInputType
  }

  export type GetLibraryTeamAggregateType<T extends LibraryTeamAggregateArgs> = {
        [P in keyof T & keyof AggregateLibraryTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibraryTeam[P]>
      : GetScalarType<T[P], AggregateLibraryTeam[P]>
  }




  export type LibraryTeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LibraryTeamWhereInput
    orderBy?: LibraryTeamOrderByWithAggregationInput | LibraryTeamOrderByWithAggregationInput[]
    by: LibraryTeamScalarFieldEnum[] | LibraryTeamScalarFieldEnum
    having?: LibraryTeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibraryTeamCountAggregateInputType | true
    _avg?: LibraryTeamAvgAggregateInputType
    _sum?: LibraryTeamSumAggregateInputType
    _min?: LibraryTeamMinAggregateInputType
    _max?: LibraryTeamMaxAggregateInputType
  }

  export type LibraryTeamGroupByOutputType = {
    id: number
    userId: string
    _count: LibraryTeamCountAggregateOutputType | null
    _avg: LibraryTeamAvgAggregateOutputType | null
    _sum: LibraryTeamSumAggregateOutputType | null
    _min: LibraryTeamMinAggregateOutputType | null
    _max: LibraryTeamMaxAggregateOutputType | null
  }

  type GetLibraryTeamGroupByPayload<T extends LibraryTeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LibraryTeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibraryTeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibraryTeamGroupByOutputType[P]>
            : GetScalarType<T[P], LibraryTeamGroupByOutputType[P]>
        }
      >
    >


  export type LibraryTeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    rejectionMessages?: boolean | LibraryTeam$rejectionMessagesArgs<ExtArgs>
    _count?: boolean | LibraryTeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["libraryTeam"]>

  export type LibraryTeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["libraryTeam"]>

  export type LibraryTeamSelectScalar = {
    id?: boolean
    userId?: boolean
  }

  export type LibraryTeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    rejectionMessages?: boolean | LibraryTeam$rejectionMessagesArgs<ExtArgs>
    _count?: boolean | LibraryTeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LibraryTeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LibraryTeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LibraryTeam"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      rejectionMessages: Prisma.$RejectionMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
    }, ExtArgs["result"]["libraryTeam"]>
    composites: {}
  }

  type LibraryTeamGetPayload<S extends boolean | null | undefined | LibraryTeamDefaultArgs> = $Result.GetResult<Prisma.$LibraryTeamPayload, S>

  type LibraryTeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LibraryTeamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LibraryTeamCountAggregateInputType | true
    }

  export interface LibraryTeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LibraryTeam'], meta: { name: 'LibraryTeam' } }
    /**
     * Find zero or one LibraryTeam that matches the filter.
     * @param {LibraryTeamFindUniqueArgs} args - Arguments to find a LibraryTeam
     * @example
     * // Get one LibraryTeam
     * const libraryTeam = await prisma.libraryTeam.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LibraryTeamFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LibraryTeamFindUniqueArgs<ExtArgs>>
    ): Prisma__LibraryTeamClient<$Result.GetResult<Prisma.$LibraryTeamPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LibraryTeam that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LibraryTeamFindUniqueOrThrowArgs} args - Arguments to find a LibraryTeam
     * @example
     * // Get one LibraryTeam
     * const libraryTeam = await prisma.libraryTeam.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LibraryTeamFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LibraryTeamFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LibraryTeamClient<$Result.GetResult<Prisma.$LibraryTeamPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LibraryTeam that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryTeamFindFirstArgs} args - Arguments to find a LibraryTeam
     * @example
     * // Get one LibraryTeam
     * const libraryTeam = await prisma.libraryTeam.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LibraryTeamFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LibraryTeamFindFirstArgs<ExtArgs>>
    ): Prisma__LibraryTeamClient<$Result.GetResult<Prisma.$LibraryTeamPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LibraryTeam that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryTeamFindFirstOrThrowArgs} args - Arguments to find a LibraryTeam
     * @example
     * // Get one LibraryTeam
     * const libraryTeam = await prisma.libraryTeam.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LibraryTeamFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LibraryTeamFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LibraryTeamClient<$Result.GetResult<Prisma.$LibraryTeamPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LibraryTeams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryTeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LibraryTeams
     * const libraryTeams = await prisma.libraryTeam.findMany()
     * 
     * // Get first 10 LibraryTeams
     * const libraryTeams = await prisma.libraryTeam.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const libraryTeamWithIdOnly = await prisma.libraryTeam.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LibraryTeamFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LibraryTeamFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibraryTeamPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LibraryTeam.
     * @param {LibraryTeamCreateArgs} args - Arguments to create a LibraryTeam.
     * @example
     * // Create one LibraryTeam
     * const LibraryTeam = await prisma.libraryTeam.create({
     *   data: {
     *     // ... data to create a LibraryTeam
     *   }
     * })
     * 
    **/
    create<T extends LibraryTeamCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LibraryTeamCreateArgs<ExtArgs>>
    ): Prisma__LibraryTeamClient<$Result.GetResult<Prisma.$LibraryTeamPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LibraryTeams.
     * @param {LibraryTeamCreateManyArgs} args - Arguments to create many LibraryTeams.
     * @example
     * // Create many LibraryTeams
     * const libraryTeam = await prisma.libraryTeam.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends LibraryTeamCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LibraryTeamCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LibraryTeams and returns the data saved in the database.
     * @param {LibraryTeamCreateManyAndReturnArgs} args - Arguments to create many LibraryTeams.
     * @example
     * // Create many LibraryTeams
     * const libraryTeam = await prisma.libraryTeam.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LibraryTeams and only return the `id`
     * const libraryTeamWithIdOnly = await prisma.libraryTeam.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends LibraryTeamCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, LibraryTeamCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibraryTeamPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a LibraryTeam.
     * @param {LibraryTeamDeleteArgs} args - Arguments to delete one LibraryTeam.
     * @example
     * // Delete one LibraryTeam
     * const LibraryTeam = await prisma.libraryTeam.delete({
     *   where: {
     *     // ... filter to delete one LibraryTeam
     *   }
     * })
     * 
    **/
    delete<T extends LibraryTeamDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LibraryTeamDeleteArgs<ExtArgs>>
    ): Prisma__LibraryTeamClient<$Result.GetResult<Prisma.$LibraryTeamPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LibraryTeam.
     * @param {LibraryTeamUpdateArgs} args - Arguments to update one LibraryTeam.
     * @example
     * // Update one LibraryTeam
     * const libraryTeam = await prisma.libraryTeam.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LibraryTeamUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LibraryTeamUpdateArgs<ExtArgs>>
    ): Prisma__LibraryTeamClient<$Result.GetResult<Prisma.$LibraryTeamPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LibraryTeams.
     * @param {LibraryTeamDeleteManyArgs} args - Arguments to filter LibraryTeams to delete.
     * @example
     * // Delete a few LibraryTeams
     * const { count } = await prisma.libraryTeam.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LibraryTeamDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LibraryTeamDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LibraryTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryTeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LibraryTeams
     * const libraryTeam = await prisma.libraryTeam.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LibraryTeamUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LibraryTeamUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LibraryTeam.
     * @param {LibraryTeamUpsertArgs} args - Arguments to update or create a LibraryTeam.
     * @example
     * // Update or create a LibraryTeam
     * const libraryTeam = await prisma.libraryTeam.upsert({
     *   create: {
     *     // ... data to create a LibraryTeam
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LibraryTeam we want to update
     *   }
     * })
    **/
    upsert<T extends LibraryTeamUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LibraryTeamUpsertArgs<ExtArgs>>
    ): Prisma__LibraryTeamClient<$Result.GetResult<Prisma.$LibraryTeamPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LibraryTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryTeamCountArgs} args - Arguments to filter LibraryTeams to count.
     * @example
     * // Count the number of LibraryTeams
     * const count = await prisma.libraryTeam.count({
     *   where: {
     *     // ... the filter for the LibraryTeams we want to count
     *   }
     * })
    **/
    count<T extends LibraryTeamCountArgs>(
      args?: Subset<T, LibraryTeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibraryTeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LibraryTeam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryTeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibraryTeamAggregateArgs>(args: Subset<T, LibraryTeamAggregateArgs>): Prisma.PrismaPromise<GetLibraryTeamAggregateType<T>>

    /**
     * Group by LibraryTeam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryTeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibraryTeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibraryTeamGroupByArgs['orderBy'] }
        : { orderBy?: LibraryTeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibraryTeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibraryTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LibraryTeam model
   */
  readonly fields: LibraryTeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LibraryTeam.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LibraryTeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    rejectionMessages<T extends LibraryTeam$rejectionMessagesArgs<ExtArgs> = {}>(args?: Subset<T, LibraryTeam$rejectionMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RejectionMessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LibraryTeam model
   */ 
  interface LibraryTeamFieldRefs {
    readonly id: FieldRef<"LibraryTeam", 'Int'>
    readonly userId: FieldRef<"LibraryTeam", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LibraryTeam findUnique
   */
  export type LibraryTeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryTeam
     */
    select?: LibraryTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryTeamInclude<ExtArgs> | null
    /**
     * Filter, which LibraryTeam to fetch.
     */
    where: LibraryTeamWhereUniqueInput
  }

  /**
   * LibraryTeam findUniqueOrThrow
   */
  export type LibraryTeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryTeam
     */
    select?: LibraryTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryTeamInclude<ExtArgs> | null
    /**
     * Filter, which LibraryTeam to fetch.
     */
    where: LibraryTeamWhereUniqueInput
  }

  /**
   * LibraryTeam findFirst
   */
  export type LibraryTeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryTeam
     */
    select?: LibraryTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryTeamInclude<ExtArgs> | null
    /**
     * Filter, which LibraryTeam to fetch.
     */
    where?: LibraryTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryTeams to fetch.
     */
    orderBy?: LibraryTeamOrderByWithRelationInput | LibraryTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryTeams.
     */
    cursor?: LibraryTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryTeams.
     */
    distinct?: LibraryTeamScalarFieldEnum | LibraryTeamScalarFieldEnum[]
  }

  /**
   * LibraryTeam findFirstOrThrow
   */
  export type LibraryTeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryTeam
     */
    select?: LibraryTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryTeamInclude<ExtArgs> | null
    /**
     * Filter, which LibraryTeam to fetch.
     */
    where?: LibraryTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryTeams to fetch.
     */
    orderBy?: LibraryTeamOrderByWithRelationInput | LibraryTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryTeams.
     */
    cursor?: LibraryTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryTeams.
     */
    distinct?: LibraryTeamScalarFieldEnum | LibraryTeamScalarFieldEnum[]
  }

  /**
   * LibraryTeam findMany
   */
  export type LibraryTeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryTeam
     */
    select?: LibraryTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryTeamInclude<ExtArgs> | null
    /**
     * Filter, which LibraryTeams to fetch.
     */
    where?: LibraryTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryTeams to fetch.
     */
    orderBy?: LibraryTeamOrderByWithRelationInput | LibraryTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LibraryTeams.
     */
    cursor?: LibraryTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryTeams.
     */
    skip?: number
    distinct?: LibraryTeamScalarFieldEnum | LibraryTeamScalarFieldEnum[]
  }

  /**
   * LibraryTeam create
   */
  export type LibraryTeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryTeam
     */
    select?: LibraryTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryTeamInclude<ExtArgs> | null
    /**
     * The data needed to create a LibraryTeam.
     */
    data: XOR<LibraryTeamCreateInput, LibraryTeamUncheckedCreateInput>
  }

  /**
   * LibraryTeam createMany
   */
  export type LibraryTeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LibraryTeams.
     */
    data: LibraryTeamCreateManyInput | LibraryTeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LibraryTeam createManyAndReturn
   */
  export type LibraryTeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryTeam
     */
    select?: LibraryTeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LibraryTeams.
     */
    data: LibraryTeamCreateManyInput | LibraryTeamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryTeamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LibraryTeam update
   */
  export type LibraryTeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryTeam
     */
    select?: LibraryTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryTeamInclude<ExtArgs> | null
    /**
     * The data needed to update a LibraryTeam.
     */
    data: XOR<LibraryTeamUpdateInput, LibraryTeamUncheckedUpdateInput>
    /**
     * Choose, which LibraryTeam to update.
     */
    where: LibraryTeamWhereUniqueInput
  }

  /**
   * LibraryTeam updateMany
   */
  export type LibraryTeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LibraryTeams.
     */
    data: XOR<LibraryTeamUpdateManyMutationInput, LibraryTeamUncheckedUpdateManyInput>
    /**
     * Filter which LibraryTeams to update
     */
    where?: LibraryTeamWhereInput
  }

  /**
   * LibraryTeam upsert
   */
  export type LibraryTeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryTeam
     */
    select?: LibraryTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryTeamInclude<ExtArgs> | null
    /**
     * The filter to search for the LibraryTeam to update in case it exists.
     */
    where: LibraryTeamWhereUniqueInput
    /**
     * In case the LibraryTeam found by the `where` argument doesn't exist, create a new LibraryTeam with this data.
     */
    create: XOR<LibraryTeamCreateInput, LibraryTeamUncheckedCreateInput>
    /**
     * In case the LibraryTeam was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LibraryTeamUpdateInput, LibraryTeamUncheckedUpdateInput>
  }

  /**
   * LibraryTeam delete
   */
  export type LibraryTeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryTeam
     */
    select?: LibraryTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryTeamInclude<ExtArgs> | null
    /**
     * Filter which LibraryTeam to delete.
     */
    where: LibraryTeamWhereUniqueInput
  }

  /**
   * LibraryTeam deleteMany
   */
  export type LibraryTeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LibraryTeams to delete
     */
    where?: LibraryTeamWhereInput
  }

  /**
   * LibraryTeam.rejectionMessages
   */
  export type LibraryTeam$rejectionMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RejectionMessage
     */
    select?: RejectionMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RejectionMessageInclude<ExtArgs> | null
    where?: RejectionMessageWhereInput
    orderBy?: RejectionMessageOrderByWithRelationInput | RejectionMessageOrderByWithRelationInput[]
    cursor?: RejectionMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RejectionMessageScalarFieldEnum | RejectionMessageScalarFieldEnum[]
  }

  /**
   * LibraryTeam without action
   */
  export type LibraryTeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibraryTeam
     */
    select?: LibraryTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibraryTeamInclude<ExtArgs> | null
  }


  /**
   * Model RejectionMessage
   */

  export type AggregateRejectionMessage = {
    _count: RejectionMessageCountAggregateOutputType | null
    _avg: RejectionMessageAvgAggregateOutputType | null
    _sum: RejectionMessageSumAggregateOutputType | null
    _min: RejectionMessageMinAggregateOutputType | null
    _max: RejectionMessageMaxAggregateOutputType | null
  }

  export type RejectionMessageAvgAggregateOutputType = {
    id: number | null
    bookReviewId: number | null
    libraryTeamId: number | null
  }

  export type RejectionMessageSumAggregateOutputType = {
    id: number | null
    bookReviewId: number | null
    libraryTeamId: number | null
  }

  export type RejectionMessageMinAggregateOutputType = {
    id: number | null
    message: string | null
    bookReviewId: number | null
    libraryTeamId: number | null
  }

  export type RejectionMessageMaxAggregateOutputType = {
    id: number | null
    message: string | null
    bookReviewId: number | null
    libraryTeamId: number | null
  }

  export type RejectionMessageCountAggregateOutputType = {
    id: number
    message: number
    bookReviewId: number
    libraryTeamId: number
    _all: number
  }


  export type RejectionMessageAvgAggregateInputType = {
    id?: true
    bookReviewId?: true
    libraryTeamId?: true
  }

  export type RejectionMessageSumAggregateInputType = {
    id?: true
    bookReviewId?: true
    libraryTeamId?: true
  }

  export type RejectionMessageMinAggregateInputType = {
    id?: true
    message?: true
    bookReviewId?: true
    libraryTeamId?: true
  }

  export type RejectionMessageMaxAggregateInputType = {
    id?: true
    message?: true
    bookReviewId?: true
    libraryTeamId?: true
  }

  export type RejectionMessageCountAggregateInputType = {
    id?: true
    message?: true
    bookReviewId?: true
    libraryTeamId?: true
    _all?: true
  }

  export type RejectionMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RejectionMessage to aggregate.
     */
    where?: RejectionMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RejectionMessages to fetch.
     */
    orderBy?: RejectionMessageOrderByWithRelationInput | RejectionMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RejectionMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RejectionMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RejectionMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RejectionMessages
    **/
    _count?: true | RejectionMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RejectionMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RejectionMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RejectionMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RejectionMessageMaxAggregateInputType
  }

  export type GetRejectionMessageAggregateType<T extends RejectionMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateRejectionMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRejectionMessage[P]>
      : GetScalarType<T[P], AggregateRejectionMessage[P]>
  }




  export type RejectionMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RejectionMessageWhereInput
    orderBy?: RejectionMessageOrderByWithAggregationInput | RejectionMessageOrderByWithAggregationInput[]
    by: RejectionMessageScalarFieldEnum[] | RejectionMessageScalarFieldEnum
    having?: RejectionMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RejectionMessageCountAggregateInputType | true
    _avg?: RejectionMessageAvgAggregateInputType
    _sum?: RejectionMessageSumAggregateInputType
    _min?: RejectionMessageMinAggregateInputType
    _max?: RejectionMessageMaxAggregateInputType
  }

  export type RejectionMessageGroupByOutputType = {
    id: number
    message: string
    bookReviewId: number
    libraryTeamId: number
    _count: RejectionMessageCountAggregateOutputType | null
    _avg: RejectionMessageAvgAggregateOutputType | null
    _sum: RejectionMessageSumAggregateOutputType | null
    _min: RejectionMessageMinAggregateOutputType | null
    _max: RejectionMessageMaxAggregateOutputType | null
  }

  type GetRejectionMessageGroupByPayload<T extends RejectionMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RejectionMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RejectionMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RejectionMessageGroupByOutputType[P]>
            : GetScalarType<T[P], RejectionMessageGroupByOutputType[P]>
        }
      >
    >


  export type RejectionMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    bookReviewId?: boolean
    libraryTeamId?: boolean
    bookReview?: boolean | BookReviewDefaultArgs<ExtArgs>
    libraryTeam?: boolean | LibraryTeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rejectionMessage"]>

  export type RejectionMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    bookReviewId?: boolean
    libraryTeamId?: boolean
    bookReview?: boolean | BookReviewDefaultArgs<ExtArgs>
    libraryTeam?: boolean | LibraryTeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rejectionMessage"]>

  export type RejectionMessageSelectScalar = {
    id?: boolean
    message?: boolean
    bookReviewId?: boolean
    libraryTeamId?: boolean
  }

  export type RejectionMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookReview?: boolean | BookReviewDefaultArgs<ExtArgs>
    libraryTeam?: boolean | LibraryTeamDefaultArgs<ExtArgs>
  }
  export type RejectionMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookReview?: boolean | BookReviewDefaultArgs<ExtArgs>
    libraryTeam?: boolean | LibraryTeamDefaultArgs<ExtArgs>
  }

  export type $RejectionMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RejectionMessage"
    objects: {
      bookReview: Prisma.$BookReviewPayload<ExtArgs>
      libraryTeam: Prisma.$LibraryTeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      message: string
      bookReviewId: number
      libraryTeamId: number
    }, ExtArgs["result"]["rejectionMessage"]>
    composites: {}
  }

  type RejectionMessageGetPayload<S extends boolean | null | undefined | RejectionMessageDefaultArgs> = $Result.GetResult<Prisma.$RejectionMessagePayload, S>

  type RejectionMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RejectionMessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RejectionMessageCountAggregateInputType | true
    }

  export interface RejectionMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RejectionMessage'], meta: { name: 'RejectionMessage' } }
    /**
     * Find zero or one RejectionMessage that matches the filter.
     * @param {RejectionMessageFindUniqueArgs} args - Arguments to find a RejectionMessage
     * @example
     * // Get one RejectionMessage
     * const rejectionMessage = await prisma.rejectionMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RejectionMessageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RejectionMessageFindUniqueArgs<ExtArgs>>
    ): Prisma__RejectionMessageClient<$Result.GetResult<Prisma.$RejectionMessagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RejectionMessage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RejectionMessageFindUniqueOrThrowArgs} args - Arguments to find a RejectionMessage
     * @example
     * // Get one RejectionMessage
     * const rejectionMessage = await prisma.rejectionMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RejectionMessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RejectionMessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RejectionMessageClient<$Result.GetResult<Prisma.$RejectionMessagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RejectionMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RejectionMessageFindFirstArgs} args - Arguments to find a RejectionMessage
     * @example
     * // Get one RejectionMessage
     * const rejectionMessage = await prisma.rejectionMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RejectionMessageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RejectionMessageFindFirstArgs<ExtArgs>>
    ): Prisma__RejectionMessageClient<$Result.GetResult<Prisma.$RejectionMessagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RejectionMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RejectionMessageFindFirstOrThrowArgs} args - Arguments to find a RejectionMessage
     * @example
     * // Get one RejectionMessage
     * const rejectionMessage = await prisma.rejectionMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RejectionMessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RejectionMessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RejectionMessageClient<$Result.GetResult<Prisma.$RejectionMessagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RejectionMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RejectionMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RejectionMessages
     * const rejectionMessages = await prisma.rejectionMessage.findMany()
     * 
     * // Get first 10 RejectionMessages
     * const rejectionMessages = await prisma.rejectionMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rejectionMessageWithIdOnly = await prisma.rejectionMessage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RejectionMessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RejectionMessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RejectionMessagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RejectionMessage.
     * @param {RejectionMessageCreateArgs} args - Arguments to create a RejectionMessage.
     * @example
     * // Create one RejectionMessage
     * const RejectionMessage = await prisma.rejectionMessage.create({
     *   data: {
     *     // ... data to create a RejectionMessage
     *   }
     * })
     * 
    **/
    create<T extends RejectionMessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RejectionMessageCreateArgs<ExtArgs>>
    ): Prisma__RejectionMessageClient<$Result.GetResult<Prisma.$RejectionMessagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RejectionMessages.
     * @param {RejectionMessageCreateManyArgs} args - Arguments to create many RejectionMessages.
     * @example
     * // Create many RejectionMessages
     * const rejectionMessage = await prisma.rejectionMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends RejectionMessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RejectionMessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RejectionMessages and returns the data saved in the database.
     * @param {RejectionMessageCreateManyAndReturnArgs} args - Arguments to create many RejectionMessages.
     * @example
     * // Create many RejectionMessages
     * const rejectionMessage = await prisma.rejectionMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RejectionMessages and only return the `id`
     * const rejectionMessageWithIdOnly = await prisma.rejectionMessage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends RejectionMessageCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, RejectionMessageCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RejectionMessagePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a RejectionMessage.
     * @param {RejectionMessageDeleteArgs} args - Arguments to delete one RejectionMessage.
     * @example
     * // Delete one RejectionMessage
     * const RejectionMessage = await prisma.rejectionMessage.delete({
     *   where: {
     *     // ... filter to delete one RejectionMessage
     *   }
     * })
     * 
    **/
    delete<T extends RejectionMessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RejectionMessageDeleteArgs<ExtArgs>>
    ): Prisma__RejectionMessageClient<$Result.GetResult<Prisma.$RejectionMessagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RejectionMessage.
     * @param {RejectionMessageUpdateArgs} args - Arguments to update one RejectionMessage.
     * @example
     * // Update one RejectionMessage
     * const rejectionMessage = await prisma.rejectionMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RejectionMessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RejectionMessageUpdateArgs<ExtArgs>>
    ): Prisma__RejectionMessageClient<$Result.GetResult<Prisma.$RejectionMessagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RejectionMessages.
     * @param {RejectionMessageDeleteManyArgs} args - Arguments to filter RejectionMessages to delete.
     * @example
     * // Delete a few RejectionMessages
     * const { count } = await prisma.rejectionMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RejectionMessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RejectionMessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RejectionMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RejectionMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RejectionMessages
     * const rejectionMessage = await prisma.rejectionMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RejectionMessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RejectionMessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RejectionMessage.
     * @param {RejectionMessageUpsertArgs} args - Arguments to update or create a RejectionMessage.
     * @example
     * // Update or create a RejectionMessage
     * const rejectionMessage = await prisma.rejectionMessage.upsert({
     *   create: {
     *     // ... data to create a RejectionMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RejectionMessage we want to update
     *   }
     * })
    **/
    upsert<T extends RejectionMessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RejectionMessageUpsertArgs<ExtArgs>>
    ): Prisma__RejectionMessageClient<$Result.GetResult<Prisma.$RejectionMessagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RejectionMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RejectionMessageCountArgs} args - Arguments to filter RejectionMessages to count.
     * @example
     * // Count the number of RejectionMessages
     * const count = await prisma.rejectionMessage.count({
     *   where: {
     *     // ... the filter for the RejectionMessages we want to count
     *   }
     * })
    **/
    count<T extends RejectionMessageCountArgs>(
      args?: Subset<T, RejectionMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RejectionMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RejectionMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RejectionMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RejectionMessageAggregateArgs>(args: Subset<T, RejectionMessageAggregateArgs>): Prisma.PrismaPromise<GetRejectionMessageAggregateType<T>>

    /**
     * Group by RejectionMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RejectionMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RejectionMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RejectionMessageGroupByArgs['orderBy'] }
        : { orderBy?: RejectionMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RejectionMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRejectionMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RejectionMessage model
   */
  readonly fields: RejectionMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RejectionMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RejectionMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    bookReview<T extends BookReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookReviewDefaultArgs<ExtArgs>>): Prisma__BookReviewClient<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    libraryTeam<T extends LibraryTeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LibraryTeamDefaultArgs<ExtArgs>>): Prisma__LibraryTeamClient<$Result.GetResult<Prisma.$LibraryTeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RejectionMessage model
   */ 
  interface RejectionMessageFieldRefs {
    readonly id: FieldRef<"RejectionMessage", 'Int'>
    readonly message: FieldRef<"RejectionMessage", 'String'>
    readonly bookReviewId: FieldRef<"RejectionMessage", 'Int'>
    readonly libraryTeamId: FieldRef<"RejectionMessage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RejectionMessage findUnique
   */
  export type RejectionMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RejectionMessage
     */
    select?: RejectionMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RejectionMessageInclude<ExtArgs> | null
    /**
     * Filter, which RejectionMessage to fetch.
     */
    where: RejectionMessageWhereUniqueInput
  }

  /**
   * RejectionMessage findUniqueOrThrow
   */
  export type RejectionMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RejectionMessage
     */
    select?: RejectionMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RejectionMessageInclude<ExtArgs> | null
    /**
     * Filter, which RejectionMessage to fetch.
     */
    where: RejectionMessageWhereUniqueInput
  }

  /**
   * RejectionMessage findFirst
   */
  export type RejectionMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RejectionMessage
     */
    select?: RejectionMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RejectionMessageInclude<ExtArgs> | null
    /**
     * Filter, which RejectionMessage to fetch.
     */
    where?: RejectionMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RejectionMessages to fetch.
     */
    orderBy?: RejectionMessageOrderByWithRelationInput | RejectionMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RejectionMessages.
     */
    cursor?: RejectionMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RejectionMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RejectionMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RejectionMessages.
     */
    distinct?: RejectionMessageScalarFieldEnum | RejectionMessageScalarFieldEnum[]
  }

  /**
   * RejectionMessage findFirstOrThrow
   */
  export type RejectionMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RejectionMessage
     */
    select?: RejectionMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RejectionMessageInclude<ExtArgs> | null
    /**
     * Filter, which RejectionMessage to fetch.
     */
    where?: RejectionMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RejectionMessages to fetch.
     */
    orderBy?: RejectionMessageOrderByWithRelationInput | RejectionMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RejectionMessages.
     */
    cursor?: RejectionMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RejectionMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RejectionMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RejectionMessages.
     */
    distinct?: RejectionMessageScalarFieldEnum | RejectionMessageScalarFieldEnum[]
  }

  /**
   * RejectionMessage findMany
   */
  export type RejectionMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RejectionMessage
     */
    select?: RejectionMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RejectionMessageInclude<ExtArgs> | null
    /**
     * Filter, which RejectionMessages to fetch.
     */
    where?: RejectionMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RejectionMessages to fetch.
     */
    orderBy?: RejectionMessageOrderByWithRelationInput | RejectionMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RejectionMessages.
     */
    cursor?: RejectionMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RejectionMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RejectionMessages.
     */
    skip?: number
    distinct?: RejectionMessageScalarFieldEnum | RejectionMessageScalarFieldEnum[]
  }

  /**
   * RejectionMessage create
   */
  export type RejectionMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RejectionMessage
     */
    select?: RejectionMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RejectionMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a RejectionMessage.
     */
    data: XOR<RejectionMessageCreateInput, RejectionMessageUncheckedCreateInput>
  }

  /**
   * RejectionMessage createMany
   */
  export type RejectionMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RejectionMessages.
     */
    data: RejectionMessageCreateManyInput | RejectionMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RejectionMessage createManyAndReturn
   */
  export type RejectionMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RejectionMessage
     */
    select?: RejectionMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RejectionMessages.
     */
    data: RejectionMessageCreateManyInput | RejectionMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RejectionMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RejectionMessage update
   */
  export type RejectionMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RejectionMessage
     */
    select?: RejectionMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RejectionMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a RejectionMessage.
     */
    data: XOR<RejectionMessageUpdateInput, RejectionMessageUncheckedUpdateInput>
    /**
     * Choose, which RejectionMessage to update.
     */
    where: RejectionMessageWhereUniqueInput
  }

  /**
   * RejectionMessage updateMany
   */
  export type RejectionMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RejectionMessages.
     */
    data: XOR<RejectionMessageUpdateManyMutationInput, RejectionMessageUncheckedUpdateManyInput>
    /**
     * Filter which RejectionMessages to update
     */
    where?: RejectionMessageWhereInput
  }

  /**
   * RejectionMessage upsert
   */
  export type RejectionMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RejectionMessage
     */
    select?: RejectionMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RejectionMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the RejectionMessage to update in case it exists.
     */
    where: RejectionMessageWhereUniqueInput
    /**
     * In case the RejectionMessage found by the `where` argument doesn't exist, create a new RejectionMessage with this data.
     */
    create: XOR<RejectionMessageCreateInput, RejectionMessageUncheckedCreateInput>
    /**
     * In case the RejectionMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RejectionMessageUpdateInput, RejectionMessageUncheckedUpdateInput>
  }

  /**
   * RejectionMessage delete
   */
  export type RejectionMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RejectionMessage
     */
    select?: RejectionMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RejectionMessageInclude<ExtArgs> | null
    /**
     * Filter which RejectionMessage to delete.
     */
    where: RejectionMessageWhereUniqueInput
  }

  /**
   * RejectionMessage deleteMany
   */
  export type RejectionMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RejectionMessages to delete
     */
    where?: RejectionMessageWhereInput
  }

  /**
   * RejectionMessage without action
   */
  export type RejectionMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RejectionMessage
     */
    select?: RejectionMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RejectionMessageInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    bookReviewId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    bookReviewId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    message: string | null
    bookReviewId: number | null
    userId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    message: string | null
    bookReviewId: number | null
    userId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    message: number
    bookReviewId: number
    userId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    bookReviewId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    bookReviewId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    message?: true
    bookReviewId?: true
    userId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    message?: true
    bookReviewId?: true
    userId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    message?: true
    bookReviewId?: true
    userId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: number
    message: string
    bookReviewId: number
    userId: string
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    bookReviewId?: boolean
    userId?: boolean
    bookReview?: boolean | BookReviewDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    bookReviewId?: boolean
    userId?: boolean
    bookReview?: boolean | BookReviewDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    message?: boolean
    bookReviewId?: boolean
    userId?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookReview?: boolean | BookReviewDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookReview?: boolean | BookReviewDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      bookReview: Prisma.$BookReviewPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      message: string
      bookReviewId: number
      userId: string
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentCreateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CommentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    bookReview<T extends BookReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookReviewDefaultArgs<ExtArgs>>): Prisma__BookReviewClient<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'Int'>
    readonly message: FieldRef<"Comment", 'String'>
    readonly bookReviewId: FieldRef<"Comment", 'Int'>
    readonly userId: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Like
   */

  export type AggregateLike = {
    _count: LikeCountAggregateOutputType | null
    _avg: LikeAvgAggregateOutputType | null
    _sum: LikeSumAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  export type LikeAvgAggregateOutputType = {
    id: number | null
    bookReviewId: number | null
  }

  export type LikeSumAggregateOutputType = {
    id: number | null
    bookReviewId: number | null
  }

  export type LikeMinAggregateOutputType = {
    id: number | null
    userId: string | null
    bookReviewId: number | null
  }

  export type LikeMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    bookReviewId: number | null
  }

  export type LikeCountAggregateOutputType = {
    id: number
    userId: number
    bookReviewId: number
    _all: number
  }


  export type LikeAvgAggregateInputType = {
    id?: true
    bookReviewId?: true
  }

  export type LikeSumAggregateInputType = {
    id?: true
    bookReviewId?: true
  }

  export type LikeMinAggregateInputType = {
    id?: true
    userId?: true
    bookReviewId?: true
  }

  export type LikeMaxAggregateInputType = {
    id?: true
    userId?: true
    bookReviewId?: true
  }

  export type LikeCountAggregateInputType = {
    id?: true
    userId?: true
    bookReviewId?: true
    _all?: true
  }

  export type LikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Like to aggregate.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likes
    **/
    _count?: true | LikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeMaxAggregateInputType
  }

  export type GetLikeAggregateType<T extends LikeAggregateArgs> = {
        [P in keyof T & keyof AggregateLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLike[P]>
      : GetScalarType<T[P], AggregateLike[P]>
  }




  export type LikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikeWhereInput
    orderBy?: LikeOrderByWithAggregationInput | LikeOrderByWithAggregationInput[]
    by: LikeScalarFieldEnum[] | LikeScalarFieldEnum
    having?: LikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeCountAggregateInputType | true
    _avg?: LikeAvgAggregateInputType
    _sum?: LikeSumAggregateInputType
    _min?: LikeMinAggregateInputType
    _max?: LikeMaxAggregateInputType
  }

  export type LikeGroupByOutputType = {
    id: number
    userId: string
    bookReviewId: number
    _count: LikeCountAggregateOutputType | null
    _avg: LikeAvgAggregateOutputType | null
    _sum: LikeSumAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  type GetLikeGroupByPayload<T extends LikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeGroupByOutputType[P]>
            : GetScalarType<T[P], LikeGroupByOutputType[P]>
        }
      >
    >


  export type LikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    bookReviewId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    bookReview?: boolean | BookReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>

  export type LikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    bookReviewId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    bookReview?: boolean | BookReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["like"]>

  export type LikeSelectScalar = {
    id?: boolean
    userId?: boolean
    bookReviewId?: boolean
  }

  export type LikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    bookReview?: boolean | BookReviewDefaultArgs<ExtArgs>
  }
  export type LikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    bookReview?: boolean | BookReviewDefaultArgs<ExtArgs>
  }

  export type $LikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Like"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      bookReview: Prisma.$BookReviewPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      bookReviewId: number
    }, ExtArgs["result"]["like"]>
    composites: {}
  }

  type LikeGetPayload<S extends boolean | null | undefined | LikeDefaultArgs> = $Result.GetResult<Prisma.$LikePayload, S>

  type LikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LikeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LikeCountAggregateInputType | true
    }

  export interface LikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Like'], meta: { name: 'Like' } }
    /**
     * Find zero or one Like that matches the filter.
     * @param {LikeFindUniqueArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LikeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LikeFindUniqueArgs<ExtArgs>>
    ): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Like that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LikeFindUniqueOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LikeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Like that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LikeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeFindFirstArgs<ExtArgs>>
    ): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Like that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LikeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.like.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.like.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeWithIdOnly = await prisma.like.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LikeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Like.
     * @param {LikeCreateArgs} args - Arguments to create a Like.
     * @example
     * // Create one Like
     * const Like = await prisma.like.create({
     *   data: {
     *     // ... data to create a Like
     *   }
     * })
     * 
    **/
    create<T extends LikeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LikeCreateArgs<ExtArgs>>
    ): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Likes.
     * @param {LikeCreateManyArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends LikeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Likes and returns the data saved in the database.
     * @param {LikeCreateManyAndReturnArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const like = await prisma.like.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Likes and only return the `id`
     * const likeWithIdOnly = await prisma.like.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends LikeCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Like.
     * @param {LikeDeleteArgs} args - Arguments to delete one Like.
     * @example
     * // Delete one Like
     * const Like = await prisma.like.delete({
     *   where: {
     *     // ... filter to delete one Like
     *   }
     * })
     * 
    **/
    delete<T extends LikeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LikeDeleteArgs<ExtArgs>>
    ): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Like.
     * @param {LikeUpdateArgs} args - Arguments to update one Like.
     * @example
     * // Update one Like
     * const like = await prisma.like.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LikeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LikeUpdateArgs<ExtArgs>>
    ): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Likes.
     * @param {LikeDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.like.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LikeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LikeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LikeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LikeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Like.
     * @param {LikeUpsertArgs} args - Arguments to update or create a Like.
     * @example
     * // Update or create a Like
     * const like = await prisma.like.upsert({
     *   create: {
     *     // ... data to create a Like
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Like we want to update
     *   }
     * })
    **/
    upsert<T extends LikeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LikeUpsertArgs<ExtArgs>>
    ): Prisma__LikeClient<$Result.GetResult<Prisma.$LikePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeCountArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.like.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
    **/
    count<T extends LikeCountArgs>(
      args?: Subset<T, LikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeAggregateArgs>(args: Subset<T, LikeAggregateArgs>): Prisma.PrismaPromise<GetLikeAggregateType<T>>

    /**
     * Group by Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeGroupByArgs['orderBy'] }
        : { orderBy?: LikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Like model
   */
  readonly fields: LikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Like.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    bookReview<T extends BookReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookReviewDefaultArgs<ExtArgs>>): Prisma__BookReviewClient<$Result.GetResult<Prisma.$BookReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Like model
   */ 
  interface LikeFieldRefs {
    readonly id: FieldRef<"Like", 'Int'>
    readonly userId: FieldRef<"Like", 'String'>
    readonly bookReviewId: FieldRef<"Like", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Like findUnique
   */
  export type LikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findUniqueOrThrow
   */
  export type LikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findFirst
   */
  export type LikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findFirstOrThrow
   */
  export type LikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like findMany
   */
  export type LikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikeOrderByWithRelationInput | LikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    distinct?: LikeScalarFieldEnum | LikeScalarFieldEnum[]
  }

  /**
   * Like create
   */
  export type LikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to create a Like.
     */
    data: XOR<LikeCreateInput, LikeUncheckedCreateInput>
  }

  /**
   * Like createMany
   */
  export type LikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Like createManyAndReturn
   */
  export type LikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Likes.
     */
    data: LikeCreateManyInput | LikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Like update
   */
  export type LikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The data needed to update a Like.
     */
    data: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
    /**
     * Choose, which Like to update.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like updateMany
   */
  export type LikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Likes.
     */
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyInput>
    /**
     * Filter which Likes to update
     */
    where?: LikeWhereInput
  }

  /**
   * Like upsert
   */
  export type LikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * The filter to search for the Like to update in case it exists.
     */
    where: LikeWhereUniqueInput
    /**
     * In case the Like found by the `where` argument doesn't exist, create a new Like with this data.
     */
    create: XOR<LikeCreateInput, LikeUncheckedCreateInput>
    /**
     * In case the Like was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
  }

  /**
   * Like delete
   */
  export type LikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
    /**
     * Filter which Like to delete.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like deleteMany
   */
  export type LikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likes to delete
     */
    where?: LikeWhereInput
  }

  /**
   * Like without action
   */
  export type LikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    userId: 'userId',
    firstName: 'firstName',
    email: 'email',
    imageUrl: 'imageUrl'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BookReviewScalarFieldEnum: {
    reviewId: 'reviewId',
    bookName: 'bookName',
    bookDsc: 'bookDsc',
    bookType: 'bookType',
    bookReview: 'bookReview',
    bookImageUrl: 'bookImageUrl',
    presentAtLibrary: 'presentAtLibrary',
    referenceNumber: 'referenceNumber',
    bookReviewByLcMember: 'bookReviewByLcMember',
    isValidated: 'isValidated',
    isRejected: 'isRejected',
    userId: 'userId',
    likeCount: 'likeCount'
  };

  export type BookReviewScalarFieldEnum = (typeof BookReviewScalarFieldEnum)[keyof typeof BookReviewScalarFieldEnum]


  export const LibraryTeamScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type LibraryTeamScalarFieldEnum = (typeof LibraryTeamScalarFieldEnum)[keyof typeof LibraryTeamScalarFieldEnum]


  export const RejectionMessageScalarFieldEnum: {
    id: 'id',
    message: 'message',
    bookReviewId: 'bookReviewId',
    libraryTeamId: 'libraryTeamId'
  };

  export type RejectionMessageScalarFieldEnum = (typeof RejectionMessageScalarFieldEnum)[keyof typeof RejectionMessageScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    message: 'message',
    bookReviewId: 'bookReviewId',
    userId: 'userId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const LikeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    bookReviewId: 'bookReviewId'
  };

  export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    userId?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    imageUrl?: StringNullableFilter<"User"> | string | null
    bookReviews?: BookReviewListRelationFilter
    libraryTeam?: LibraryTeamListRelationFilter
    comments?: CommentListRelationFilter
    likes?: LikeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    userId?: SortOrder
    firstName?: SortOrder
    email?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    bookReviews?: BookReviewOrderByRelationAggregateInput
    libraryTeam?: LibraryTeamOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    imageUrl?: StringNullableFilter<"User"> | string | null
    bookReviews?: BookReviewListRelationFilter
    libraryTeam?: LibraryTeamListRelationFilter
    comments?: CommentListRelationFilter
    likes?: LikeListRelationFilter
  }, "userId" | "email">

  export type UserOrderByWithAggregationInput = {
    userId?: SortOrder
    firstName?: SortOrder
    email?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type BookReviewWhereInput = {
    AND?: BookReviewWhereInput | BookReviewWhereInput[]
    OR?: BookReviewWhereInput[]
    NOT?: BookReviewWhereInput | BookReviewWhereInput[]
    reviewId?: IntFilter<"BookReview"> | number
    bookName?: StringFilter<"BookReview"> | string
    bookDsc?: StringFilter<"BookReview"> | string
    bookType?: StringFilter<"BookReview"> | string
    bookReview?: StringFilter<"BookReview"> | string
    bookImageUrl?: StringNullableFilter<"BookReview"> | string | null
    presentAtLibrary?: BoolFilter<"BookReview"> | boolean
    referenceNumber?: StringNullableFilter<"BookReview"> | string | null
    bookReviewByLcMember?: BoolFilter<"BookReview"> | boolean
    isValidated?: BoolFilter<"BookReview"> | boolean
    isRejected?: BoolFilter<"BookReview"> | boolean
    userId?: StringFilter<"BookReview"> | string
    likeCount?: IntFilter<"BookReview"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    rejectionMessages?: RejectionMessageListRelationFilter
    comments?: CommentListRelationFilter
    likes?: LikeListRelationFilter
  }

  export type BookReviewOrderByWithRelationInput = {
    reviewId?: SortOrder
    bookName?: SortOrder
    bookDsc?: SortOrder
    bookType?: SortOrder
    bookReview?: SortOrder
    bookImageUrl?: SortOrderInput | SortOrder
    presentAtLibrary?: SortOrder
    referenceNumber?: SortOrderInput | SortOrder
    bookReviewByLcMember?: SortOrder
    isValidated?: SortOrder
    isRejected?: SortOrder
    userId?: SortOrder
    likeCount?: SortOrder
    user?: UserOrderByWithRelationInput
    rejectionMessages?: RejectionMessageOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    likes?: LikeOrderByRelationAggregateInput
  }

  export type BookReviewWhereUniqueInput = Prisma.AtLeast<{
    reviewId?: number
    AND?: BookReviewWhereInput | BookReviewWhereInput[]
    OR?: BookReviewWhereInput[]
    NOT?: BookReviewWhereInput | BookReviewWhereInput[]
    bookName?: StringFilter<"BookReview"> | string
    bookDsc?: StringFilter<"BookReview"> | string
    bookType?: StringFilter<"BookReview"> | string
    bookReview?: StringFilter<"BookReview"> | string
    bookImageUrl?: StringNullableFilter<"BookReview"> | string | null
    presentAtLibrary?: BoolFilter<"BookReview"> | boolean
    referenceNumber?: StringNullableFilter<"BookReview"> | string | null
    bookReviewByLcMember?: BoolFilter<"BookReview"> | boolean
    isValidated?: BoolFilter<"BookReview"> | boolean
    isRejected?: BoolFilter<"BookReview"> | boolean
    userId?: StringFilter<"BookReview"> | string
    likeCount?: IntFilter<"BookReview"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    rejectionMessages?: RejectionMessageListRelationFilter
    comments?: CommentListRelationFilter
    likes?: LikeListRelationFilter
  }, "reviewId">

  export type BookReviewOrderByWithAggregationInput = {
    reviewId?: SortOrder
    bookName?: SortOrder
    bookDsc?: SortOrder
    bookType?: SortOrder
    bookReview?: SortOrder
    bookImageUrl?: SortOrderInput | SortOrder
    presentAtLibrary?: SortOrder
    referenceNumber?: SortOrderInput | SortOrder
    bookReviewByLcMember?: SortOrder
    isValidated?: SortOrder
    isRejected?: SortOrder
    userId?: SortOrder
    likeCount?: SortOrder
    _count?: BookReviewCountOrderByAggregateInput
    _avg?: BookReviewAvgOrderByAggregateInput
    _max?: BookReviewMaxOrderByAggregateInput
    _min?: BookReviewMinOrderByAggregateInput
    _sum?: BookReviewSumOrderByAggregateInput
  }

  export type BookReviewScalarWhereWithAggregatesInput = {
    AND?: BookReviewScalarWhereWithAggregatesInput | BookReviewScalarWhereWithAggregatesInput[]
    OR?: BookReviewScalarWhereWithAggregatesInput[]
    NOT?: BookReviewScalarWhereWithAggregatesInput | BookReviewScalarWhereWithAggregatesInput[]
    reviewId?: IntWithAggregatesFilter<"BookReview"> | number
    bookName?: StringWithAggregatesFilter<"BookReview"> | string
    bookDsc?: StringWithAggregatesFilter<"BookReview"> | string
    bookType?: StringWithAggregatesFilter<"BookReview"> | string
    bookReview?: StringWithAggregatesFilter<"BookReview"> | string
    bookImageUrl?: StringNullableWithAggregatesFilter<"BookReview"> | string | null
    presentAtLibrary?: BoolWithAggregatesFilter<"BookReview"> | boolean
    referenceNumber?: StringNullableWithAggregatesFilter<"BookReview"> | string | null
    bookReviewByLcMember?: BoolWithAggregatesFilter<"BookReview"> | boolean
    isValidated?: BoolWithAggregatesFilter<"BookReview"> | boolean
    isRejected?: BoolWithAggregatesFilter<"BookReview"> | boolean
    userId?: StringWithAggregatesFilter<"BookReview"> | string
    likeCount?: IntWithAggregatesFilter<"BookReview"> | number
  }

  export type LibraryTeamWhereInput = {
    AND?: LibraryTeamWhereInput | LibraryTeamWhereInput[]
    OR?: LibraryTeamWhereInput[]
    NOT?: LibraryTeamWhereInput | LibraryTeamWhereInput[]
    id?: IntFilter<"LibraryTeam"> | number
    userId?: StringFilter<"LibraryTeam"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    rejectionMessages?: RejectionMessageListRelationFilter
  }

  export type LibraryTeamOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    rejectionMessages?: RejectionMessageOrderByRelationAggregateInput
  }

  export type LibraryTeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LibraryTeamWhereInput | LibraryTeamWhereInput[]
    OR?: LibraryTeamWhereInput[]
    NOT?: LibraryTeamWhereInput | LibraryTeamWhereInput[]
    userId?: StringFilter<"LibraryTeam"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    rejectionMessages?: RejectionMessageListRelationFilter
  }, "id">

  export type LibraryTeamOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: LibraryTeamCountOrderByAggregateInput
    _avg?: LibraryTeamAvgOrderByAggregateInput
    _max?: LibraryTeamMaxOrderByAggregateInput
    _min?: LibraryTeamMinOrderByAggregateInput
    _sum?: LibraryTeamSumOrderByAggregateInput
  }

  export type LibraryTeamScalarWhereWithAggregatesInput = {
    AND?: LibraryTeamScalarWhereWithAggregatesInput | LibraryTeamScalarWhereWithAggregatesInput[]
    OR?: LibraryTeamScalarWhereWithAggregatesInput[]
    NOT?: LibraryTeamScalarWhereWithAggregatesInput | LibraryTeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LibraryTeam"> | number
    userId?: StringWithAggregatesFilter<"LibraryTeam"> | string
  }

  export type RejectionMessageWhereInput = {
    AND?: RejectionMessageWhereInput | RejectionMessageWhereInput[]
    OR?: RejectionMessageWhereInput[]
    NOT?: RejectionMessageWhereInput | RejectionMessageWhereInput[]
    id?: IntFilter<"RejectionMessage"> | number
    message?: StringFilter<"RejectionMessage"> | string
    bookReviewId?: IntFilter<"RejectionMessage"> | number
    libraryTeamId?: IntFilter<"RejectionMessage"> | number
    bookReview?: XOR<BookReviewRelationFilter, BookReviewWhereInput>
    libraryTeam?: XOR<LibraryTeamRelationFilter, LibraryTeamWhereInput>
  }

  export type RejectionMessageOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    bookReviewId?: SortOrder
    libraryTeamId?: SortOrder
    bookReview?: BookReviewOrderByWithRelationInput
    libraryTeam?: LibraryTeamOrderByWithRelationInput
  }

  export type RejectionMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RejectionMessageWhereInput | RejectionMessageWhereInput[]
    OR?: RejectionMessageWhereInput[]
    NOT?: RejectionMessageWhereInput | RejectionMessageWhereInput[]
    message?: StringFilter<"RejectionMessage"> | string
    bookReviewId?: IntFilter<"RejectionMessage"> | number
    libraryTeamId?: IntFilter<"RejectionMessage"> | number
    bookReview?: XOR<BookReviewRelationFilter, BookReviewWhereInput>
    libraryTeam?: XOR<LibraryTeamRelationFilter, LibraryTeamWhereInput>
  }, "id">

  export type RejectionMessageOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    bookReviewId?: SortOrder
    libraryTeamId?: SortOrder
    _count?: RejectionMessageCountOrderByAggregateInput
    _avg?: RejectionMessageAvgOrderByAggregateInput
    _max?: RejectionMessageMaxOrderByAggregateInput
    _min?: RejectionMessageMinOrderByAggregateInput
    _sum?: RejectionMessageSumOrderByAggregateInput
  }

  export type RejectionMessageScalarWhereWithAggregatesInput = {
    AND?: RejectionMessageScalarWhereWithAggregatesInput | RejectionMessageScalarWhereWithAggregatesInput[]
    OR?: RejectionMessageScalarWhereWithAggregatesInput[]
    NOT?: RejectionMessageScalarWhereWithAggregatesInput | RejectionMessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RejectionMessage"> | number
    message?: StringWithAggregatesFilter<"RejectionMessage"> | string
    bookReviewId?: IntWithAggregatesFilter<"RejectionMessage"> | number
    libraryTeamId?: IntWithAggregatesFilter<"RejectionMessage"> | number
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: IntFilter<"Comment"> | number
    message?: StringFilter<"Comment"> | string
    bookReviewId?: IntFilter<"Comment"> | number
    userId?: StringFilter<"Comment"> | string
    bookReview?: XOR<BookReviewRelationFilter, BookReviewWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    bookReviewId?: SortOrder
    userId?: SortOrder
    bookReview?: BookReviewOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    message?: StringFilter<"Comment"> | string
    bookReviewId?: IntFilter<"Comment"> | number
    userId?: StringFilter<"Comment"> | string
    bookReview?: XOR<BookReviewRelationFilter, BookReviewWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    bookReviewId?: SortOrder
    userId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comment"> | number
    message?: StringWithAggregatesFilter<"Comment"> | string
    bookReviewId?: IntWithAggregatesFilter<"Comment"> | number
    userId?: StringWithAggregatesFilter<"Comment"> | string
  }

  export type LikeWhereInput = {
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    id?: IntFilter<"Like"> | number
    userId?: StringFilter<"Like"> | string
    bookReviewId?: IntFilter<"Like"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    bookReview?: XOR<BookReviewRelationFilter, BookReviewWhereInput>
  }

  export type LikeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    bookReviewId?: SortOrder
    user?: UserOrderByWithRelationInput
    bookReview?: BookReviewOrderByWithRelationInput
  }

  export type LikeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_bookReviewId?: LikeUserIdBookReviewIdCompoundUniqueInput
    AND?: LikeWhereInput | LikeWhereInput[]
    OR?: LikeWhereInput[]
    NOT?: LikeWhereInput | LikeWhereInput[]
    userId?: StringFilter<"Like"> | string
    bookReviewId?: IntFilter<"Like"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    bookReview?: XOR<BookReviewRelationFilter, BookReviewWhereInput>
  }, "id" | "userId_bookReviewId">

  export type LikeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    bookReviewId?: SortOrder
    _count?: LikeCountOrderByAggregateInput
    _avg?: LikeAvgOrderByAggregateInput
    _max?: LikeMaxOrderByAggregateInput
    _min?: LikeMinOrderByAggregateInput
    _sum?: LikeSumOrderByAggregateInput
  }

  export type LikeScalarWhereWithAggregatesInput = {
    AND?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    OR?: LikeScalarWhereWithAggregatesInput[]
    NOT?: LikeScalarWhereWithAggregatesInput | LikeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Like"> | number
    userId?: StringWithAggregatesFilter<"Like"> | string
    bookReviewId?: IntWithAggregatesFilter<"Like"> | number
  }

  export type UserCreateInput = {
    userId: string
    firstName: string
    email: string
    imageUrl?: string | null
    bookReviews?: BookReviewCreateNestedManyWithoutUserInput
    libraryTeam?: LibraryTeamCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    userId: string
    firstName: string
    email: string
    imageUrl?: string | null
    bookReviews?: BookReviewUncheckedCreateNestedManyWithoutUserInput
    libraryTeam?: LibraryTeamUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviews?: BookReviewUpdateManyWithoutUserNestedInput
    libraryTeam?: LibraryTeamUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviews?: BookReviewUncheckedUpdateManyWithoutUserNestedInput
    libraryTeam?: LibraryTeamUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    userId: string
    firstName: string
    email: string
    imageUrl?: string | null
  }

  export type UserUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookReviewCreateInput = {
    bookName: string
    bookDsc: string
    bookType: string
    bookReview: string
    bookImageUrl?: string | null
    presentAtLibrary: boolean
    referenceNumber?: string | null
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    likeCount?: number
    user: UserCreateNestedOneWithoutBookReviewsInput
    rejectionMessages?: RejectionMessageCreateNestedManyWithoutBookReviewInput
    comments?: CommentCreateNestedManyWithoutBookReviewInput
    likes?: LikeCreateNestedManyWithoutBookReviewInput
  }

  export type BookReviewUncheckedCreateInput = {
    reviewId?: number
    bookName: string
    bookDsc: string
    bookType: string
    bookReview: string
    bookImageUrl?: string | null
    presentAtLibrary: boolean
    referenceNumber?: string | null
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    userId: string
    likeCount?: number
    rejectionMessages?: RejectionMessageUncheckedCreateNestedManyWithoutBookReviewInput
    comments?: CommentUncheckedCreateNestedManyWithoutBookReviewInput
    likes?: LikeUncheckedCreateNestedManyWithoutBookReviewInput
  }

  export type BookReviewUpdateInput = {
    bookName?: StringFieldUpdateOperationsInput | string
    bookDsc?: StringFieldUpdateOperationsInput | string
    bookType?: StringFieldUpdateOperationsInput | string
    bookReview?: StringFieldUpdateOperationsInput | string
    bookImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    presentAtLibrary?: BoolFieldUpdateOperationsInput | boolean
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviewByLcMember?: BoolFieldUpdateOperationsInput | boolean
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    isRejected?: BoolFieldUpdateOperationsInput | boolean
    likeCount?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutBookReviewsNestedInput
    rejectionMessages?: RejectionMessageUpdateManyWithoutBookReviewNestedInput
    comments?: CommentUpdateManyWithoutBookReviewNestedInput
    likes?: LikeUpdateManyWithoutBookReviewNestedInput
  }

  export type BookReviewUncheckedUpdateInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    bookName?: StringFieldUpdateOperationsInput | string
    bookDsc?: StringFieldUpdateOperationsInput | string
    bookType?: StringFieldUpdateOperationsInput | string
    bookReview?: StringFieldUpdateOperationsInput | string
    bookImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    presentAtLibrary?: BoolFieldUpdateOperationsInput | boolean
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviewByLcMember?: BoolFieldUpdateOperationsInput | boolean
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    isRejected?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    rejectionMessages?: RejectionMessageUncheckedUpdateManyWithoutBookReviewNestedInput
    comments?: CommentUncheckedUpdateManyWithoutBookReviewNestedInput
    likes?: LikeUncheckedUpdateManyWithoutBookReviewNestedInput
  }

  export type BookReviewCreateManyInput = {
    reviewId?: number
    bookName: string
    bookDsc: string
    bookType: string
    bookReview: string
    bookImageUrl?: string | null
    presentAtLibrary: boolean
    referenceNumber?: string | null
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    userId: string
    likeCount?: number
  }

  export type BookReviewUpdateManyMutationInput = {
    bookName?: StringFieldUpdateOperationsInput | string
    bookDsc?: StringFieldUpdateOperationsInput | string
    bookType?: StringFieldUpdateOperationsInput | string
    bookReview?: StringFieldUpdateOperationsInput | string
    bookImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    presentAtLibrary?: BoolFieldUpdateOperationsInput | boolean
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviewByLcMember?: BoolFieldUpdateOperationsInput | boolean
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    isRejected?: BoolFieldUpdateOperationsInput | boolean
    likeCount?: IntFieldUpdateOperationsInput | number
  }

  export type BookReviewUncheckedUpdateManyInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    bookName?: StringFieldUpdateOperationsInput | string
    bookDsc?: StringFieldUpdateOperationsInput | string
    bookType?: StringFieldUpdateOperationsInput | string
    bookReview?: StringFieldUpdateOperationsInput | string
    bookImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    presentAtLibrary?: BoolFieldUpdateOperationsInput | boolean
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviewByLcMember?: BoolFieldUpdateOperationsInput | boolean
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    isRejected?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
  }

  export type LibraryTeamCreateInput = {
    user: UserCreateNestedOneWithoutLibraryTeamInput
    rejectionMessages?: RejectionMessageCreateNestedManyWithoutLibraryTeamInput
  }

  export type LibraryTeamUncheckedCreateInput = {
    id?: number
    userId: string
    rejectionMessages?: RejectionMessageUncheckedCreateNestedManyWithoutLibraryTeamInput
  }

  export type LibraryTeamUpdateInput = {
    user?: UserUpdateOneRequiredWithoutLibraryTeamNestedInput
    rejectionMessages?: RejectionMessageUpdateManyWithoutLibraryTeamNestedInput
  }

  export type LibraryTeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    rejectionMessages?: RejectionMessageUncheckedUpdateManyWithoutLibraryTeamNestedInput
  }

  export type LibraryTeamCreateManyInput = {
    id?: number
    userId: string
  }

  export type LibraryTeamUpdateManyMutationInput = {

  }

  export type LibraryTeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type RejectionMessageCreateInput = {
    message: string
    bookReview: BookReviewCreateNestedOneWithoutRejectionMessagesInput
    libraryTeam: LibraryTeamCreateNestedOneWithoutRejectionMessagesInput
  }

  export type RejectionMessageUncheckedCreateInput = {
    id?: number
    message: string
    bookReviewId: number
    libraryTeamId: number
  }

  export type RejectionMessageUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    bookReview?: BookReviewUpdateOneRequiredWithoutRejectionMessagesNestedInput
    libraryTeam?: LibraryTeamUpdateOneRequiredWithoutRejectionMessagesNestedInput
  }

  export type RejectionMessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    bookReviewId?: IntFieldUpdateOperationsInput | number
    libraryTeamId?: IntFieldUpdateOperationsInput | number
  }

  export type RejectionMessageCreateManyInput = {
    id?: number
    message: string
    bookReviewId: number
    libraryTeamId: number
  }

  export type RejectionMessageUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
  }

  export type RejectionMessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    bookReviewId?: IntFieldUpdateOperationsInput | number
    libraryTeamId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    message: string
    bookReview: BookReviewCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    message: string
    bookReviewId: number
    userId: string
  }

  export type CommentUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    bookReview?: BookReviewUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    bookReviewId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyInput = {
    id?: number
    message: string
    bookReviewId: number
    userId: string
  }

  export type CommentUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    bookReviewId?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LikeCreateInput = {
    user: UserCreateNestedOneWithoutLikesInput
    bookReview: BookReviewCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateInput = {
    id?: number
    userId: string
    bookReviewId: number
  }

  export type LikeUpdateInput = {
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
    bookReview?: BookReviewUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    bookReviewId?: IntFieldUpdateOperationsInput | number
  }

  export type LikeCreateManyInput = {
    id?: number
    userId: string
    bookReviewId: number
  }

  export type LikeUpdateManyMutationInput = {

  }

  export type LikeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    bookReviewId?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BookReviewListRelationFilter = {
    every?: BookReviewWhereInput
    some?: BookReviewWhereInput
    none?: BookReviewWhereInput
  }

  export type LibraryTeamListRelationFilter = {
    every?: LibraryTeamWhereInput
    some?: LibraryTeamWhereInput
    none?: LibraryTeamWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type LikeListRelationFilter = {
    every?: LikeWhereInput
    some?: LikeWhereInput
    none?: LikeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BookReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LibraryTeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    email?: SortOrder
    imageUrl?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    email?: SortOrder
    imageUrl?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    email?: SortOrder
    imageUrl?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RejectionMessageListRelationFilter = {
    every?: RejectionMessageWhereInput
    some?: RejectionMessageWhereInput
    none?: RejectionMessageWhereInput
  }

  export type RejectionMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookReviewCountOrderByAggregateInput = {
    reviewId?: SortOrder
    bookName?: SortOrder
    bookDsc?: SortOrder
    bookType?: SortOrder
    bookReview?: SortOrder
    bookImageUrl?: SortOrder
    presentAtLibrary?: SortOrder
    referenceNumber?: SortOrder
    bookReviewByLcMember?: SortOrder
    isValidated?: SortOrder
    isRejected?: SortOrder
    userId?: SortOrder
    likeCount?: SortOrder
  }

  export type BookReviewAvgOrderByAggregateInput = {
    reviewId?: SortOrder
    likeCount?: SortOrder
  }

  export type BookReviewMaxOrderByAggregateInput = {
    reviewId?: SortOrder
    bookName?: SortOrder
    bookDsc?: SortOrder
    bookType?: SortOrder
    bookReview?: SortOrder
    bookImageUrl?: SortOrder
    presentAtLibrary?: SortOrder
    referenceNumber?: SortOrder
    bookReviewByLcMember?: SortOrder
    isValidated?: SortOrder
    isRejected?: SortOrder
    userId?: SortOrder
    likeCount?: SortOrder
  }

  export type BookReviewMinOrderByAggregateInput = {
    reviewId?: SortOrder
    bookName?: SortOrder
    bookDsc?: SortOrder
    bookType?: SortOrder
    bookReview?: SortOrder
    bookImageUrl?: SortOrder
    presentAtLibrary?: SortOrder
    referenceNumber?: SortOrder
    bookReviewByLcMember?: SortOrder
    isValidated?: SortOrder
    isRejected?: SortOrder
    userId?: SortOrder
    likeCount?: SortOrder
  }

  export type BookReviewSumOrderByAggregateInput = {
    reviewId?: SortOrder
    likeCount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type LibraryTeamCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type LibraryTeamAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LibraryTeamMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type LibraryTeamMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type LibraryTeamSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BookReviewRelationFilter = {
    is?: BookReviewWhereInput
    isNot?: BookReviewWhereInput
  }

  export type LibraryTeamRelationFilter = {
    is?: LibraryTeamWhereInput
    isNot?: LibraryTeamWhereInput
  }

  export type RejectionMessageCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    bookReviewId?: SortOrder
    libraryTeamId?: SortOrder
  }

  export type RejectionMessageAvgOrderByAggregateInput = {
    id?: SortOrder
    bookReviewId?: SortOrder
    libraryTeamId?: SortOrder
  }

  export type RejectionMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    bookReviewId?: SortOrder
    libraryTeamId?: SortOrder
  }

  export type RejectionMessageMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    bookReviewId?: SortOrder
    libraryTeamId?: SortOrder
  }

  export type RejectionMessageSumOrderByAggregateInput = {
    id?: SortOrder
    bookReviewId?: SortOrder
    libraryTeamId?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    bookReviewId?: SortOrder
    userId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    bookReviewId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    bookReviewId?: SortOrder
    userId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    bookReviewId?: SortOrder
    userId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    bookReviewId?: SortOrder
  }

  export type LikeUserIdBookReviewIdCompoundUniqueInput = {
    userId: string
    bookReviewId: number
  }

  export type LikeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bookReviewId?: SortOrder
  }

  export type LikeAvgOrderByAggregateInput = {
    id?: SortOrder
    bookReviewId?: SortOrder
  }

  export type LikeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bookReviewId?: SortOrder
  }

  export type LikeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bookReviewId?: SortOrder
  }

  export type LikeSumOrderByAggregateInput = {
    id?: SortOrder
    bookReviewId?: SortOrder
  }

  export type BookReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<BookReviewCreateWithoutUserInput, BookReviewUncheckedCreateWithoutUserInput> | BookReviewCreateWithoutUserInput[] | BookReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookReviewCreateOrConnectWithoutUserInput | BookReviewCreateOrConnectWithoutUserInput[]
    createMany?: BookReviewCreateManyUserInputEnvelope
    connect?: BookReviewWhereUniqueInput | BookReviewWhereUniqueInput[]
  }

  export type LibraryTeamCreateNestedManyWithoutUserInput = {
    create?: XOR<LibraryTeamCreateWithoutUserInput, LibraryTeamUncheckedCreateWithoutUserInput> | LibraryTeamCreateWithoutUserInput[] | LibraryTeamUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LibraryTeamCreateOrConnectWithoutUserInput | LibraryTeamCreateOrConnectWithoutUserInput[]
    createMany?: LibraryTeamCreateManyUserInputEnvelope
    connect?: LibraryTeamWhereUniqueInput | LibraryTeamWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type BookReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BookReviewCreateWithoutUserInput, BookReviewUncheckedCreateWithoutUserInput> | BookReviewCreateWithoutUserInput[] | BookReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookReviewCreateOrConnectWithoutUserInput | BookReviewCreateOrConnectWithoutUserInput[]
    createMany?: BookReviewCreateManyUserInputEnvelope
    connect?: BookReviewWhereUniqueInput | BookReviewWhereUniqueInput[]
  }

  export type LibraryTeamUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LibraryTeamCreateWithoutUserInput, LibraryTeamUncheckedCreateWithoutUserInput> | LibraryTeamCreateWithoutUserInput[] | LibraryTeamUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LibraryTeamCreateOrConnectWithoutUserInput | LibraryTeamCreateOrConnectWithoutUserInput[]
    createMany?: LibraryTeamCreateManyUserInputEnvelope
    connect?: LibraryTeamWhereUniqueInput | LibraryTeamWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BookReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookReviewCreateWithoutUserInput, BookReviewUncheckedCreateWithoutUserInput> | BookReviewCreateWithoutUserInput[] | BookReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookReviewCreateOrConnectWithoutUserInput | BookReviewCreateOrConnectWithoutUserInput[]
    upsert?: BookReviewUpsertWithWhereUniqueWithoutUserInput | BookReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookReviewCreateManyUserInputEnvelope
    set?: BookReviewWhereUniqueInput | BookReviewWhereUniqueInput[]
    disconnect?: BookReviewWhereUniqueInput | BookReviewWhereUniqueInput[]
    delete?: BookReviewWhereUniqueInput | BookReviewWhereUniqueInput[]
    connect?: BookReviewWhereUniqueInput | BookReviewWhereUniqueInput[]
    update?: BookReviewUpdateWithWhereUniqueWithoutUserInput | BookReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookReviewUpdateManyWithWhereWithoutUserInput | BookReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookReviewScalarWhereInput | BookReviewScalarWhereInput[]
  }

  export type LibraryTeamUpdateManyWithoutUserNestedInput = {
    create?: XOR<LibraryTeamCreateWithoutUserInput, LibraryTeamUncheckedCreateWithoutUserInput> | LibraryTeamCreateWithoutUserInput[] | LibraryTeamUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LibraryTeamCreateOrConnectWithoutUserInput | LibraryTeamCreateOrConnectWithoutUserInput[]
    upsert?: LibraryTeamUpsertWithWhereUniqueWithoutUserInput | LibraryTeamUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LibraryTeamCreateManyUserInputEnvelope
    set?: LibraryTeamWhereUniqueInput | LibraryTeamWhereUniqueInput[]
    disconnect?: LibraryTeamWhereUniqueInput | LibraryTeamWhereUniqueInput[]
    delete?: LibraryTeamWhereUniqueInput | LibraryTeamWhereUniqueInput[]
    connect?: LibraryTeamWhereUniqueInput | LibraryTeamWhereUniqueInput[]
    update?: LibraryTeamUpdateWithWhereUniqueWithoutUserInput | LibraryTeamUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LibraryTeamUpdateManyWithWhereWithoutUserInput | LibraryTeamUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LibraryTeamScalarWhereInput | LibraryTeamScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutUserInput | LikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutUserInput | LikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutUserInput | LikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type BookReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookReviewCreateWithoutUserInput, BookReviewUncheckedCreateWithoutUserInput> | BookReviewCreateWithoutUserInput[] | BookReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookReviewCreateOrConnectWithoutUserInput | BookReviewCreateOrConnectWithoutUserInput[]
    upsert?: BookReviewUpsertWithWhereUniqueWithoutUserInput | BookReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookReviewCreateManyUserInputEnvelope
    set?: BookReviewWhereUniqueInput | BookReviewWhereUniqueInput[]
    disconnect?: BookReviewWhereUniqueInput | BookReviewWhereUniqueInput[]
    delete?: BookReviewWhereUniqueInput | BookReviewWhereUniqueInput[]
    connect?: BookReviewWhereUniqueInput | BookReviewWhereUniqueInput[]
    update?: BookReviewUpdateWithWhereUniqueWithoutUserInput | BookReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookReviewUpdateManyWithWhereWithoutUserInput | BookReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookReviewScalarWhereInput | BookReviewScalarWhereInput[]
  }

  export type LibraryTeamUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LibraryTeamCreateWithoutUserInput, LibraryTeamUncheckedCreateWithoutUserInput> | LibraryTeamCreateWithoutUserInput[] | LibraryTeamUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LibraryTeamCreateOrConnectWithoutUserInput | LibraryTeamCreateOrConnectWithoutUserInput[]
    upsert?: LibraryTeamUpsertWithWhereUniqueWithoutUserInput | LibraryTeamUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LibraryTeamCreateManyUserInputEnvelope
    set?: LibraryTeamWhereUniqueInput | LibraryTeamWhereUniqueInput[]
    disconnect?: LibraryTeamWhereUniqueInput | LibraryTeamWhereUniqueInput[]
    delete?: LibraryTeamWhereUniqueInput | LibraryTeamWhereUniqueInput[]
    connect?: LibraryTeamWhereUniqueInput | LibraryTeamWhereUniqueInput[]
    update?: LibraryTeamUpdateWithWhereUniqueWithoutUserInput | LibraryTeamUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LibraryTeamUpdateManyWithWhereWithoutUserInput | LibraryTeamUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LibraryTeamScalarWhereInput | LibraryTeamScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput> | LikeCreateWithoutUserInput[] | LikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutUserInput | LikeCreateOrConnectWithoutUserInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutUserInput | LikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikeCreateManyUserInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutUserInput | LikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutUserInput | LikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBookReviewsInput = {
    create?: XOR<UserCreateWithoutBookReviewsInput, UserUncheckedCreateWithoutBookReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type RejectionMessageCreateNestedManyWithoutBookReviewInput = {
    create?: XOR<RejectionMessageCreateWithoutBookReviewInput, RejectionMessageUncheckedCreateWithoutBookReviewInput> | RejectionMessageCreateWithoutBookReviewInput[] | RejectionMessageUncheckedCreateWithoutBookReviewInput[]
    connectOrCreate?: RejectionMessageCreateOrConnectWithoutBookReviewInput | RejectionMessageCreateOrConnectWithoutBookReviewInput[]
    createMany?: RejectionMessageCreateManyBookReviewInputEnvelope
    connect?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutBookReviewInput = {
    create?: XOR<CommentCreateWithoutBookReviewInput, CommentUncheckedCreateWithoutBookReviewInput> | CommentCreateWithoutBookReviewInput[] | CommentUncheckedCreateWithoutBookReviewInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutBookReviewInput | CommentCreateOrConnectWithoutBookReviewInput[]
    createMany?: CommentCreateManyBookReviewInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikeCreateNestedManyWithoutBookReviewInput = {
    create?: XOR<LikeCreateWithoutBookReviewInput, LikeUncheckedCreateWithoutBookReviewInput> | LikeCreateWithoutBookReviewInput[] | LikeUncheckedCreateWithoutBookReviewInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutBookReviewInput | LikeCreateOrConnectWithoutBookReviewInput[]
    createMany?: LikeCreateManyBookReviewInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type RejectionMessageUncheckedCreateNestedManyWithoutBookReviewInput = {
    create?: XOR<RejectionMessageCreateWithoutBookReviewInput, RejectionMessageUncheckedCreateWithoutBookReviewInput> | RejectionMessageCreateWithoutBookReviewInput[] | RejectionMessageUncheckedCreateWithoutBookReviewInput[]
    connectOrCreate?: RejectionMessageCreateOrConnectWithoutBookReviewInput | RejectionMessageCreateOrConnectWithoutBookReviewInput[]
    createMany?: RejectionMessageCreateManyBookReviewInputEnvelope
    connect?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutBookReviewInput = {
    create?: XOR<CommentCreateWithoutBookReviewInput, CommentUncheckedCreateWithoutBookReviewInput> | CommentCreateWithoutBookReviewInput[] | CommentUncheckedCreateWithoutBookReviewInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutBookReviewInput | CommentCreateOrConnectWithoutBookReviewInput[]
    createMany?: CommentCreateManyBookReviewInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type LikeUncheckedCreateNestedManyWithoutBookReviewInput = {
    create?: XOR<LikeCreateWithoutBookReviewInput, LikeUncheckedCreateWithoutBookReviewInput> | LikeCreateWithoutBookReviewInput[] | LikeUncheckedCreateWithoutBookReviewInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutBookReviewInput | LikeCreateOrConnectWithoutBookReviewInput[]
    createMany?: LikeCreateManyBookReviewInputEnvelope
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutBookReviewsNestedInput = {
    create?: XOR<UserCreateWithoutBookReviewsInput, UserUncheckedCreateWithoutBookReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookReviewsInput
    upsert?: UserUpsertWithoutBookReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBookReviewsInput, UserUpdateWithoutBookReviewsInput>, UserUncheckedUpdateWithoutBookReviewsInput>
  }

  export type RejectionMessageUpdateManyWithoutBookReviewNestedInput = {
    create?: XOR<RejectionMessageCreateWithoutBookReviewInput, RejectionMessageUncheckedCreateWithoutBookReviewInput> | RejectionMessageCreateWithoutBookReviewInput[] | RejectionMessageUncheckedCreateWithoutBookReviewInput[]
    connectOrCreate?: RejectionMessageCreateOrConnectWithoutBookReviewInput | RejectionMessageCreateOrConnectWithoutBookReviewInput[]
    upsert?: RejectionMessageUpsertWithWhereUniqueWithoutBookReviewInput | RejectionMessageUpsertWithWhereUniqueWithoutBookReviewInput[]
    createMany?: RejectionMessageCreateManyBookReviewInputEnvelope
    set?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    disconnect?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    delete?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    connect?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    update?: RejectionMessageUpdateWithWhereUniqueWithoutBookReviewInput | RejectionMessageUpdateWithWhereUniqueWithoutBookReviewInput[]
    updateMany?: RejectionMessageUpdateManyWithWhereWithoutBookReviewInput | RejectionMessageUpdateManyWithWhereWithoutBookReviewInput[]
    deleteMany?: RejectionMessageScalarWhereInput | RejectionMessageScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutBookReviewNestedInput = {
    create?: XOR<CommentCreateWithoutBookReviewInput, CommentUncheckedCreateWithoutBookReviewInput> | CommentCreateWithoutBookReviewInput[] | CommentUncheckedCreateWithoutBookReviewInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutBookReviewInput | CommentCreateOrConnectWithoutBookReviewInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutBookReviewInput | CommentUpsertWithWhereUniqueWithoutBookReviewInput[]
    createMany?: CommentCreateManyBookReviewInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutBookReviewInput | CommentUpdateWithWhereUniqueWithoutBookReviewInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutBookReviewInput | CommentUpdateManyWithWhereWithoutBookReviewInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikeUpdateManyWithoutBookReviewNestedInput = {
    create?: XOR<LikeCreateWithoutBookReviewInput, LikeUncheckedCreateWithoutBookReviewInput> | LikeCreateWithoutBookReviewInput[] | LikeUncheckedCreateWithoutBookReviewInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutBookReviewInput | LikeCreateOrConnectWithoutBookReviewInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutBookReviewInput | LikeUpsertWithWhereUniqueWithoutBookReviewInput[]
    createMany?: LikeCreateManyBookReviewInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutBookReviewInput | LikeUpdateWithWhereUniqueWithoutBookReviewInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutBookReviewInput | LikeUpdateManyWithWhereWithoutBookReviewInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type RejectionMessageUncheckedUpdateManyWithoutBookReviewNestedInput = {
    create?: XOR<RejectionMessageCreateWithoutBookReviewInput, RejectionMessageUncheckedCreateWithoutBookReviewInput> | RejectionMessageCreateWithoutBookReviewInput[] | RejectionMessageUncheckedCreateWithoutBookReviewInput[]
    connectOrCreate?: RejectionMessageCreateOrConnectWithoutBookReviewInput | RejectionMessageCreateOrConnectWithoutBookReviewInput[]
    upsert?: RejectionMessageUpsertWithWhereUniqueWithoutBookReviewInput | RejectionMessageUpsertWithWhereUniqueWithoutBookReviewInput[]
    createMany?: RejectionMessageCreateManyBookReviewInputEnvelope
    set?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    disconnect?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    delete?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    connect?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    update?: RejectionMessageUpdateWithWhereUniqueWithoutBookReviewInput | RejectionMessageUpdateWithWhereUniqueWithoutBookReviewInput[]
    updateMany?: RejectionMessageUpdateManyWithWhereWithoutBookReviewInput | RejectionMessageUpdateManyWithWhereWithoutBookReviewInput[]
    deleteMany?: RejectionMessageScalarWhereInput | RejectionMessageScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutBookReviewNestedInput = {
    create?: XOR<CommentCreateWithoutBookReviewInput, CommentUncheckedCreateWithoutBookReviewInput> | CommentCreateWithoutBookReviewInput[] | CommentUncheckedCreateWithoutBookReviewInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutBookReviewInput | CommentCreateOrConnectWithoutBookReviewInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutBookReviewInput | CommentUpsertWithWhereUniqueWithoutBookReviewInput[]
    createMany?: CommentCreateManyBookReviewInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutBookReviewInput | CommentUpdateWithWhereUniqueWithoutBookReviewInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutBookReviewInput | CommentUpdateManyWithWhereWithoutBookReviewInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type LikeUncheckedUpdateManyWithoutBookReviewNestedInput = {
    create?: XOR<LikeCreateWithoutBookReviewInput, LikeUncheckedCreateWithoutBookReviewInput> | LikeCreateWithoutBookReviewInput[] | LikeUncheckedCreateWithoutBookReviewInput[]
    connectOrCreate?: LikeCreateOrConnectWithoutBookReviewInput | LikeCreateOrConnectWithoutBookReviewInput[]
    upsert?: LikeUpsertWithWhereUniqueWithoutBookReviewInput | LikeUpsertWithWhereUniqueWithoutBookReviewInput[]
    createMany?: LikeCreateManyBookReviewInputEnvelope
    set?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    disconnect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    delete?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    connect?: LikeWhereUniqueInput | LikeWhereUniqueInput[]
    update?: LikeUpdateWithWhereUniqueWithoutBookReviewInput | LikeUpdateWithWhereUniqueWithoutBookReviewInput[]
    updateMany?: LikeUpdateManyWithWhereWithoutBookReviewInput | LikeUpdateManyWithWhereWithoutBookReviewInput[]
    deleteMany?: LikeScalarWhereInput | LikeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLibraryTeamInput = {
    create?: XOR<UserCreateWithoutLibraryTeamInput, UserUncheckedCreateWithoutLibraryTeamInput>
    connectOrCreate?: UserCreateOrConnectWithoutLibraryTeamInput
    connect?: UserWhereUniqueInput
  }

  export type RejectionMessageCreateNestedManyWithoutLibraryTeamInput = {
    create?: XOR<RejectionMessageCreateWithoutLibraryTeamInput, RejectionMessageUncheckedCreateWithoutLibraryTeamInput> | RejectionMessageCreateWithoutLibraryTeamInput[] | RejectionMessageUncheckedCreateWithoutLibraryTeamInput[]
    connectOrCreate?: RejectionMessageCreateOrConnectWithoutLibraryTeamInput | RejectionMessageCreateOrConnectWithoutLibraryTeamInput[]
    createMany?: RejectionMessageCreateManyLibraryTeamInputEnvelope
    connect?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
  }

  export type RejectionMessageUncheckedCreateNestedManyWithoutLibraryTeamInput = {
    create?: XOR<RejectionMessageCreateWithoutLibraryTeamInput, RejectionMessageUncheckedCreateWithoutLibraryTeamInput> | RejectionMessageCreateWithoutLibraryTeamInput[] | RejectionMessageUncheckedCreateWithoutLibraryTeamInput[]
    connectOrCreate?: RejectionMessageCreateOrConnectWithoutLibraryTeamInput | RejectionMessageCreateOrConnectWithoutLibraryTeamInput[]
    createMany?: RejectionMessageCreateManyLibraryTeamInputEnvelope
    connect?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutLibraryTeamNestedInput = {
    create?: XOR<UserCreateWithoutLibraryTeamInput, UserUncheckedCreateWithoutLibraryTeamInput>
    connectOrCreate?: UserCreateOrConnectWithoutLibraryTeamInput
    upsert?: UserUpsertWithoutLibraryTeamInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLibraryTeamInput, UserUpdateWithoutLibraryTeamInput>, UserUncheckedUpdateWithoutLibraryTeamInput>
  }

  export type RejectionMessageUpdateManyWithoutLibraryTeamNestedInput = {
    create?: XOR<RejectionMessageCreateWithoutLibraryTeamInput, RejectionMessageUncheckedCreateWithoutLibraryTeamInput> | RejectionMessageCreateWithoutLibraryTeamInput[] | RejectionMessageUncheckedCreateWithoutLibraryTeamInput[]
    connectOrCreate?: RejectionMessageCreateOrConnectWithoutLibraryTeamInput | RejectionMessageCreateOrConnectWithoutLibraryTeamInput[]
    upsert?: RejectionMessageUpsertWithWhereUniqueWithoutLibraryTeamInput | RejectionMessageUpsertWithWhereUniqueWithoutLibraryTeamInput[]
    createMany?: RejectionMessageCreateManyLibraryTeamInputEnvelope
    set?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    disconnect?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    delete?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    connect?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    update?: RejectionMessageUpdateWithWhereUniqueWithoutLibraryTeamInput | RejectionMessageUpdateWithWhereUniqueWithoutLibraryTeamInput[]
    updateMany?: RejectionMessageUpdateManyWithWhereWithoutLibraryTeamInput | RejectionMessageUpdateManyWithWhereWithoutLibraryTeamInput[]
    deleteMany?: RejectionMessageScalarWhereInput | RejectionMessageScalarWhereInput[]
  }

  export type RejectionMessageUncheckedUpdateManyWithoutLibraryTeamNestedInput = {
    create?: XOR<RejectionMessageCreateWithoutLibraryTeamInput, RejectionMessageUncheckedCreateWithoutLibraryTeamInput> | RejectionMessageCreateWithoutLibraryTeamInput[] | RejectionMessageUncheckedCreateWithoutLibraryTeamInput[]
    connectOrCreate?: RejectionMessageCreateOrConnectWithoutLibraryTeamInput | RejectionMessageCreateOrConnectWithoutLibraryTeamInput[]
    upsert?: RejectionMessageUpsertWithWhereUniqueWithoutLibraryTeamInput | RejectionMessageUpsertWithWhereUniqueWithoutLibraryTeamInput[]
    createMany?: RejectionMessageCreateManyLibraryTeamInputEnvelope
    set?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    disconnect?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    delete?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    connect?: RejectionMessageWhereUniqueInput | RejectionMessageWhereUniqueInput[]
    update?: RejectionMessageUpdateWithWhereUniqueWithoutLibraryTeamInput | RejectionMessageUpdateWithWhereUniqueWithoutLibraryTeamInput[]
    updateMany?: RejectionMessageUpdateManyWithWhereWithoutLibraryTeamInput | RejectionMessageUpdateManyWithWhereWithoutLibraryTeamInput[]
    deleteMany?: RejectionMessageScalarWhereInput | RejectionMessageScalarWhereInput[]
  }

  export type BookReviewCreateNestedOneWithoutRejectionMessagesInput = {
    create?: XOR<BookReviewCreateWithoutRejectionMessagesInput, BookReviewUncheckedCreateWithoutRejectionMessagesInput>
    connectOrCreate?: BookReviewCreateOrConnectWithoutRejectionMessagesInput
    connect?: BookReviewWhereUniqueInput
  }

  export type LibraryTeamCreateNestedOneWithoutRejectionMessagesInput = {
    create?: XOR<LibraryTeamCreateWithoutRejectionMessagesInput, LibraryTeamUncheckedCreateWithoutRejectionMessagesInput>
    connectOrCreate?: LibraryTeamCreateOrConnectWithoutRejectionMessagesInput
    connect?: LibraryTeamWhereUniqueInput
  }

  export type BookReviewUpdateOneRequiredWithoutRejectionMessagesNestedInput = {
    create?: XOR<BookReviewCreateWithoutRejectionMessagesInput, BookReviewUncheckedCreateWithoutRejectionMessagesInput>
    connectOrCreate?: BookReviewCreateOrConnectWithoutRejectionMessagesInput
    upsert?: BookReviewUpsertWithoutRejectionMessagesInput
    connect?: BookReviewWhereUniqueInput
    update?: XOR<XOR<BookReviewUpdateToOneWithWhereWithoutRejectionMessagesInput, BookReviewUpdateWithoutRejectionMessagesInput>, BookReviewUncheckedUpdateWithoutRejectionMessagesInput>
  }

  export type LibraryTeamUpdateOneRequiredWithoutRejectionMessagesNestedInput = {
    create?: XOR<LibraryTeamCreateWithoutRejectionMessagesInput, LibraryTeamUncheckedCreateWithoutRejectionMessagesInput>
    connectOrCreate?: LibraryTeamCreateOrConnectWithoutRejectionMessagesInput
    upsert?: LibraryTeamUpsertWithoutRejectionMessagesInput
    connect?: LibraryTeamWhereUniqueInput
    update?: XOR<XOR<LibraryTeamUpdateToOneWithWhereWithoutRejectionMessagesInput, LibraryTeamUpdateWithoutRejectionMessagesInput>, LibraryTeamUncheckedUpdateWithoutRejectionMessagesInput>
  }

  export type BookReviewCreateNestedOneWithoutCommentsInput = {
    create?: XOR<BookReviewCreateWithoutCommentsInput, BookReviewUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: BookReviewCreateOrConnectWithoutCommentsInput
    connect?: BookReviewWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type BookReviewUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<BookReviewCreateWithoutCommentsInput, BookReviewUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: BookReviewCreateOrConnectWithoutCommentsInput
    upsert?: BookReviewUpsertWithoutCommentsInput
    connect?: BookReviewWhereUniqueInput
    update?: XOR<XOR<BookReviewUpdateToOneWithWhereWithoutCommentsInput, BookReviewUpdateWithoutCommentsInput>, BookReviewUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserCreateNestedOneWithoutLikesInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    connect?: UserWhereUniqueInput
  }

  export type BookReviewCreateNestedOneWithoutLikesInput = {
    create?: XOR<BookReviewCreateWithoutLikesInput, BookReviewUncheckedCreateWithoutLikesInput>
    connectOrCreate?: BookReviewCreateOrConnectWithoutLikesInput
    connect?: BookReviewWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    upsert?: UserUpsertWithoutLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikesInput, UserUpdateWithoutLikesInput>, UserUncheckedUpdateWithoutLikesInput>
  }

  export type BookReviewUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<BookReviewCreateWithoutLikesInput, BookReviewUncheckedCreateWithoutLikesInput>
    connectOrCreate?: BookReviewCreateOrConnectWithoutLikesInput
    upsert?: BookReviewUpsertWithoutLikesInput
    connect?: BookReviewWhereUniqueInput
    update?: XOR<XOR<BookReviewUpdateToOneWithWhereWithoutLikesInput, BookReviewUpdateWithoutLikesInput>, BookReviewUncheckedUpdateWithoutLikesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BookReviewCreateWithoutUserInput = {
    bookName: string
    bookDsc: string
    bookType: string
    bookReview: string
    bookImageUrl?: string | null
    presentAtLibrary: boolean
    referenceNumber?: string | null
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    likeCount?: number
    rejectionMessages?: RejectionMessageCreateNestedManyWithoutBookReviewInput
    comments?: CommentCreateNestedManyWithoutBookReviewInput
    likes?: LikeCreateNestedManyWithoutBookReviewInput
  }

  export type BookReviewUncheckedCreateWithoutUserInput = {
    reviewId?: number
    bookName: string
    bookDsc: string
    bookType: string
    bookReview: string
    bookImageUrl?: string | null
    presentAtLibrary: boolean
    referenceNumber?: string | null
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    likeCount?: number
    rejectionMessages?: RejectionMessageUncheckedCreateNestedManyWithoutBookReviewInput
    comments?: CommentUncheckedCreateNestedManyWithoutBookReviewInput
    likes?: LikeUncheckedCreateNestedManyWithoutBookReviewInput
  }

  export type BookReviewCreateOrConnectWithoutUserInput = {
    where: BookReviewWhereUniqueInput
    create: XOR<BookReviewCreateWithoutUserInput, BookReviewUncheckedCreateWithoutUserInput>
  }

  export type BookReviewCreateManyUserInputEnvelope = {
    data: BookReviewCreateManyUserInput | BookReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LibraryTeamCreateWithoutUserInput = {
    rejectionMessages?: RejectionMessageCreateNestedManyWithoutLibraryTeamInput
  }

  export type LibraryTeamUncheckedCreateWithoutUserInput = {
    id?: number
    rejectionMessages?: RejectionMessageUncheckedCreateNestedManyWithoutLibraryTeamInput
  }

  export type LibraryTeamCreateOrConnectWithoutUserInput = {
    where: LibraryTeamWhereUniqueInput
    create: XOR<LibraryTeamCreateWithoutUserInput, LibraryTeamUncheckedCreateWithoutUserInput>
  }

  export type LibraryTeamCreateManyUserInputEnvelope = {
    data: LibraryTeamCreateManyUserInput | LibraryTeamCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    message: string
    bookReview: BookReviewCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: number
    message: string
    bookReviewId: number
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutUserInput = {
    bookReview: BookReviewCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutUserInput = {
    id?: number
    bookReviewId: number
  }

  export type LikeCreateOrConnectWithoutUserInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
  }

  export type LikeCreateManyUserInputEnvelope = {
    data: LikeCreateManyUserInput | LikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BookReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: BookReviewWhereUniqueInput
    update: XOR<BookReviewUpdateWithoutUserInput, BookReviewUncheckedUpdateWithoutUserInput>
    create: XOR<BookReviewCreateWithoutUserInput, BookReviewUncheckedCreateWithoutUserInput>
  }

  export type BookReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: BookReviewWhereUniqueInput
    data: XOR<BookReviewUpdateWithoutUserInput, BookReviewUncheckedUpdateWithoutUserInput>
  }

  export type BookReviewUpdateManyWithWhereWithoutUserInput = {
    where: BookReviewScalarWhereInput
    data: XOR<BookReviewUpdateManyMutationInput, BookReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type BookReviewScalarWhereInput = {
    AND?: BookReviewScalarWhereInput | BookReviewScalarWhereInput[]
    OR?: BookReviewScalarWhereInput[]
    NOT?: BookReviewScalarWhereInput | BookReviewScalarWhereInput[]
    reviewId?: IntFilter<"BookReview"> | number
    bookName?: StringFilter<"BookReview"> | string
    bookDsc?: StringFilter<"BookReview"> | string
    bookType?: StringFilter<"BookReview"> | string
    bookReview?: StringFilter<"BookReview"> | string
    bookImageUrl?: StringNullableFilter<"BookReview"> | string | null
    presentAtLibrary?: BoolFilter<"BookReview"> | boolean
    referenceNumber?: StringNullableFilter<"BookReview"> | string | null
    bookReviewByLcMember?: BoolFilter<"BookReview"> | boolean
    isValidated?: BoolFilter<"BookReview"> | boolean
    isRejected?: BoolFilter<"BookReview"> | boolean
    userId?: StringFilter<"BookReview"> | string
    likeCount?: IntFilter<"BookReview"> | number
  }

  export type LibraryTeamUpsertWithWhereUniqueWithoutUserInput = {
    where: LibraryTeamWhereUniqueInput
    update: XOR<LibraryTeamUpdateWithoutUserInput, LibraryTeamUncheckedUpdateWithoutUserInput>
    create: XOR<LibraryTeamCreateWithoutUserInput, LibraryTeamUncheckedCreateWithoutUserInput>
  }

  export type LibraryTeamUpdateWithWhereUniqueWithoutUserInput = {
    where: LibraryTeamWhereUniqueInput
    data: XOR<LibraryTeamUpdateWithoutUserInput, LibraryTeamUncheckedUpdateWithoutUserInput>
  }

  export type LibraryTeamUpdateManyWithWhereWithoutUserInput = {
    where: LibraryTeamScalarWhereInput
    data: XOR<LibraryTeamUpdateManyMutationInput, LibraryTeamUncheckedUpdateManyWithoutUserInput>
  }

  export type LibraryTeamScalarWhereInput = {
    AND?: LibraryTeamScalarWhereInput | LibraryTeamScalarWhereInput[]
    OR?: LibraryTeamScalarWhereInput[]
    NOT?: LibraryTeamScalarWhereInput | LibraryTeamScalarWhereInput[]
    id?: IntFilter<"LibraryTeam"> | number
    userId?: StringFilter<"LibraryTeam"> | string
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: IntFilter<"Comment"> | number
    message?: StringFilter<"Comment"> | string
    bookReviewId?: IntFilter<"Comment"> | number
    userId?: StringFilter<"Comment"> | string
  }

  export type LikeUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>
    create: XOR<LikeCreateWithoutUserInput, LikeUncheckedCreateWithoutUserInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutUserInput, LikeUncheckedUpdateWithoutUserInput>
  }

  export type LikeUpdateManyWithWhereWithoutUserInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutUserInput>
  }

  export type LikeScalarWhereInput = {
    AND?: LikeScalarWhereInput | LikeScalarWhereInput[]
    OR?: LikeScalarWhereInput[]
    NOT?: LikeScalarWhereInput | LikeScalarWhereInput[]
    id?: IntFilter<"Like"> | number
    userId?: StringFilter<"Like"> | string
    bookReviewId?: IntFilter<"Like"> | number
  }

  export type UserCreateWithoutBookReviewsInput = {
    userId: string
    firstName: string
    email: string
    imageUrl?: string | null
    libraryTeam?: LibraryTeamCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBookReviewsInput = {
    userId: string
    firstName: string
    email: string
    imageUrl?: string | null
    libraryTeam?: LibraryTeamUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBookReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookReviewsInput, UserUncheckedCreateWithoutBookReviewsInput>
  }

  export type RejectionMessageCreateWithoutBookReviewInput = {
    message: string
    libraryTeam: LibraryTeamCreateNestedOneWithoutRejectionMessagesInput
  }

  export type RejectionMessageUncheckedCreateWithoutBookReviewInput = {
    id?: number
    message: string
    libraryTeamId: number
  }

  export type RejectionMessageCreateOrConnectWithoutBookReviewInput = {
    where: RejectionMessageWhereUniqueInput
    create: XOR<RejectionMessageCreateWithoutBookReviewInput, RejectionMessageUncheckedCreateWithoutBookReviewInput>
  }

  export type RejectionMessageCreateManyBookReviewInputEnvelope = {
    data: RejectionMessageCreateManyBookReviewInput | RejectionMessageCreateManyBookReviewInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutBookReviewInput = {
    message: string
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutBookReviewInput = {
    id?: number
    message: string
    userId: string
  }

  export type CommentCreateOrConnectWithoutBookReviewInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutBookReviewInput, CommentUncheckedCreateWithoutBookReviewInput>
  }

  export type CommentCreateManyBookReviewInputEnvelope = {
    data: CommentCreateManyBookReviewInput | CommentCreateManyBookReviewInput[]
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutBookReviewInput = {
    user: UserCreateNestedOneWithoutLikesInput
  }

  export type LikeUncheckedCreateWithoutBookReviewInput = {
    id?: number
    userId: string
  }

  export type LikeCreateOrConnectWithoutBookReviewInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutBookReviewInput, LikeUncheckedCreateWithoutBookReviewInput>
  }

  export type LikeCreateManyBookReviewInputEnvelope = {
    data: LikeCreateManyBookReviewInput | LikeCreateManyBookReviewInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBookReviewsInput = {
    update: XOR<UserUpdateWithoutBookReviewsInput, UserUncheckedUpdateWithoutBookReviewsInput>
    create: XOR<UserCreateWithoutBookReviewsInput, UserUncheckedCreateWithoutBookReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBookReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBookReviewsInput, UserUncheckedUpdateWithoutBookReviewsInput>
  }

  export type UserUpdateWithoutBookReviewsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    libraryTeam?: LibraryTeamUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBookReviewsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    libraryTeam?: LibraryTeamUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RejectionMessageUpsertWithWhereUniqueWithoutBookReviewInput = {
    where: RejectionMessageWhereUniqueInput
    update: XOR<RejectionMessageUpdateWithoutBookReviewInput, RejectionMessageUncheckedUpdateWithoutBookReviewInput>
    create: XOR<RejectionMessageCreateWithoutBookReviewInput, RejectionMessageUncheckedCreateWithoutBookReviewInput>
  }

  export type RejectionMessageUpdateWithWhereUniqueWithoutBookReviewInput = {
    where: RejectionMessageWhereUniqueInput
    data: XOR<RejectionMessageUpdateWithoutBookReviewInput, RejectionMessageUncheckedUpdateWithoutBookReviewInput>
  }

  export type RejectionMessageUpdateManyWithWhereWithoutBookReviewInput = {
    where: RejectionMessageScalarWhereInput
    data: XOR<RejectionMessageUpdateManyMutationInput, RejectionMessageUncheckedUpdateManyWithoutBookReviewInput>
  }

  export type RejectionMessageScalarWhereInput = {
    AND?: RejectionMessageScalarWhereInput | RejectionMessageScalarWhereInput[]
    OR?: RejectionMessageScalarWhereInput[]
    NOT?: RejectionMessageScalarWhereInput | RejectionMessageScalarWhereInput[]
    id?: IntFilter<"RejectionMessage"> | number
    message?: StringFilter<"RejectionMessage"> | string
    bookReviewId?: IntFilter<"RejectionMessage"> | number
    libraryTeamId?: IntFilter<"RejectionMessage"> | number
  }

  export type CommentUpsertWithWhereUniqueWithoutBookReviewInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutBookReviewInput, CommentUncheckedUpdateWithoutBookReviewInput>
    create: XOR<CommentCreateWithoutBookReviewInput, CommentUncheckedCreateWithoutBookReviewInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutBookReviewInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutBookReviewInput, CommentUncheckedUpdateWithoutBookReviewInput>
  }

  export type CommentUpdateManyWithWhereWithoutBookReviewInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutBookReviewInput>
  }

  export type LikeUpsertWithWhereUniqueWithoutBookReviewInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutBookReviewInput, LikeUncheckedUpdateWithoutBookReviewInput>
    create: XOR<LikeCreateWithoutBookReviewInput, LikeUncheckedCreateWithoutBookReviewInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutBookReviewInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutBookReviewInput, LikeUncheckedUpdateWithoutBookReviewInput>
  }

  export type LikeUpdateManyWithWhereWithoutBookReviewInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutBookReviewInput>
  }

  export type UserCreateWithoutLibraryTeamInput = {
    userId: string
    firstName: string
    email: string
    imageUrl?: string | null
    bookReviews?: BookReviewCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLibraryTeamInput = {
    userId: string
    firstName: string
    email: string
    imageUrl?: string | null
    bookReviews?: BookReviewUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLibraryTeamInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLibraryTeamInput, UserUncheckedCreateWithoutLibraryTeamInput>
  }

  export type RejectionMessageCreateWithoutLibraryTeamInput = {
    message: string
    bookReview: BookReviewCreateNestedOneWithoutRejectionMessagesInput
  }

  export type RejectionMessageUncheckedCreateWithoutLibraryTeamInput = {
    id?: number
    message: string
    bookReviewId: number
  }

  export type RejectionMessageCreateOrConnectWithoutLibraryTeamInput = {
    where: RejectionMessageWhereUniqueInput
    create: XOR<RejectionMessageCreateWithoutLibraryTeamInput, RejectionMessageUncheckedCreateWithoutLibraryTeamInput>
  }

  export type RejectionMessageCreateManyLibraryTeamInputEnvelope = {
    data: RejectionMessageCreateManyLibraryTeamInput | RejectionMessageCreateManyLibraryTeamInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutLibraryTeamInput = {
    update: XOR<UserUpdateWithoutLibraryTeamInput, UserUncheckedUpdateWithoutLibraryTeamInput>
    create: XOR<UserCreateWithoutLibraryTeamInput, UserUncheckedCreateWithoutLibraryTeamInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLibraryTeamInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLibraryTeamInput, UserUncheckedUpdateWithoutLibraryTeamInput>
  }

  export type UserUpdateWithoutLibraryTeamInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviews?: BookReviewUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLibraryTeamInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviews?: BookReviewUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RejectionMessageUpsertWithWhereUniqueWithoutLibraryTeamInput = {
    where: RejectionMessageWhereUniqueInput
    update: XOR<RejectionMessageUpdateWithoutLibraryTeamInput, RejectionMessageUncheckedUpdateWithoutLibraryTeamInput>
    create: XOR<RejectionMessageCreateWithoutLibraryTeamInput, RejectionMessageUncheckedCreateWithoutLibraryTeamInput>
  }

  export type RejectionMessageUpdateWithWhereUniqueWithoutLibraryTeamInput = {
    where: RejectionMessageWhereUniqueInput
    data: XOR<RejectionMessageUpdateWithoutLibraryTeamInput, RejectionMessageUncheckedUpdateWithoutLibraryTeamInput>
  }

  export type RejectionMessageUpdateManyWithWhereWithoutLibraryTeamInput = {
    where: RejectionMessageScalarWhereInput
    data: XOR<RejectionMessageUpdateManyMutationInput, RejectionMessageUncheckedUpdateManyWithoutLibraryTeamInput>
  }

  export type BookReviewCreateWithoutRejectionMessagesInput = {
    bookName: string
    bookDsc: string
    bookType: string
    bookReview: string
    bookImageUrl?: string | null
    presentAtLibrary: boolean
    referenceNumber?: string | null
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    likeCount?: number
    user: UserCreateNestedOneWithoutBookReviewsInput
    comments?: CommentCreateNestedManyWithoutBookReviewInput
    likes?: LikeCreateNestedManyWithoutBookReviewInput
  }

  export type BookReviewUncheckedCreateWithoutRejectionMessagesInput = {
    reviewId?: number
    bookName: string
    bookDsc: string
    bookType: string
    bookReview: string
    bookImageUrl?: string | null
    presentAtLibrary: boolean
    referenceNumber?: string | null
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    userId: string
    likeCount?: number
    comments?: CommentUncheckedCreateNestedManyWithoutBookReviewInput
    likes?: LikeUncheckedCreateNestedManyWithoutBookReviewInput
  }

  export type BookReviewCreateOrConnectWithoutRejectionMessagesInput = {
    where: BookReviewWhereUniqueInput
    create: XOR<BookReviewCreateWithoutRejectionMessagesInput, BookReviewUncheckedCreateWithoutRejectionMessagesInput>
  }

  export type LibraryTeamCreateWithoutRejectionMessagesInput = {
    user: UserCreateNestedOneWithoutLibraryTeamInput
  }

  export type LibraryTeamUncheckedCreateWithoutRejectionMessagesInput = {
    id?: number
    userId: string
  }

  export type LibraryTeamCreateOrConnectWithoutRejectionMessagesInput = {
    where: LibraryTeamWhereUniqueInput
    create: XOR<LibraryTeamCreateWithoutRejectionMessagesInput, LibraryTeamUncheckedCreateWithoutRejectionMessagesInput>
  }

  export type BookReviewUpsertWithoutRejectionMessagesInput = {
    update: XOR<BookReviewUpdateWithoutRejectionMessagesInput, BookReviewUncheckedUpdateWithoutRejectionMessagesInput>
    create: XOR<BookReviewCreateWithoutRejectionMessagesInput, BookReviewUncheckedCreateWithoutRejectionMessagesInput>
    where?: BookReviewWhereInput
  }

  export type BookReviewUpdateToOneWithWhereWithoutRejectionMessagesInput = {
    where?: BookReviewWhereInput
    data: XOR<BookReviewUpdateWithoutRejectionMessagesInput, BookReviewUncheckedUpdateWithoutRejectionMessagesInput>
  }

  export type BookReviewUpdateWithoutRejectionMessagesInput = {
    bookName?: StringFieldUpdateOperationsInput | string
    bookDsc?: StringFieldUpdateOperationsInput | string
    bookType?: StringFieldUpdateOperationsInput | string
    bookReview?: StringFieldUpdateOperationsInput | string
    bookImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    presentAtLibrary?: BoolFieldUpdateOperationsInput | boolean
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviewByLcMember?: BoolFieldUpdateOperationsInput | boolean
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    isRejected?: BoolFieldUpdateOperationsInput | boolean
    likeCount?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutBookReviewsNestedInput
    comments?: CommentUpdateManyWithoutBookReviewNestedInput
    likes?: LikeUpdateManyWithoutBookReviewNestedInput
  }

  export type BookReviewUncheckedUpdateWithoutRejectionMessagesInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    bookName?: StringFieldUpdateOperationsInput | string
    bookDsc?: StringFieldUpdateOperationsInput | string
    bookType?: StringFieldUpdateOperationsInput | string
    bookReview?: StringFieldUpdateOperationsInput | string
    bookImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    presentAtLibrary?: BoolFieldUpdateOperationsInput | boolean
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviewByLcMember?: BoolFieldUpdateOperationsInput | boolean
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    isRejected?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutBookReviewNestedInput
    likes?: LikeUncheckedUpdateManyWithoutBookReviewNestedInput
  }

  export type LibraryTeamUpsertWithoutRejectionMessagesInput = {
    update: XOR<LibraryTeamUpdateWithoutRejectionMessagesInput, LibraryTeamUncheckedUpdateWithoutRejectionMessagesInput>
    create: XOR<LibraryTeamCreateWithoutRejectionMessagesInput, LibraryTeamUncheckedCreateWithoutRejectionMessagesInput>
    where?: LibraryTeamWhereInput
  }

  export type LibraryTeamUpdateToOneWithWhereWithoutRejectionMessagesInput = {
    where?: LibraryTeamWhereInput
    data: XOR<LibraryTeamUpdateWithoutRejectionMessagesInput, LibraryTeamUncheckedUpdateWithoutRejectionMessagesInput>
  }

  export type LibraryTeamUpdateWithoutRejectionMessagesInput = {
    user?: UserUpdateOneRequiredWithoutLibraryTeamNestedInput
  }

  export type LibraryTeamUncheckedUpdateWithoutRejectionMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BookReviewCreateWithoutCommentsInput = {
    bookName: string
    bookDsc: string
    bookType: string
    bookReview: string
    bookImageUrl?: string | null
    presentAtLibrary: boolean
    referenceNumber?: string | null
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    likeCount?: number
    user: UserCreateNestedOneWithoutBookReviewsInput
    rejectionMessages?: RejectionMessageCreateNestedManyWithoutBookReviewInput
    likes?: LikeCreateNestedManyWithoutBookReviewInput
  }

  export type BookReviewUncheckedCreateWithoutCommentsInput = {
    reviewId?: number
    bookName: string
    bookDsc: string
    bookType: string
    bookReview: string
    bookImageUrl?: string | null
    presentAtLibrary: boolean
    referenceNumber?: string | null
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    userId: string
    likeCount?: number
    rejectionMessages?: RejectionMessageUncheckedCreateNestedManyWithoutBookReviewInput
    likes?: LikeUncheckedCreateNestedManyWithoutBookReviewInput
  }

  export type BookReviewCreateOrConnectWithoutCommentsInput = {
    where: BookReviewWhereUniqueInput
    create: XOR<BookReviewCreateWithoutCommentsInput, BookReviewUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    userId: string
    firstName: string
    email: string
    imageUrl?: string | null
    bookReviews?: BookReviewCreateNestedManyWithoutUserInput
    libraryTeam?: LibraryTeamCreateNestedManyWithoutUserInput
    likes?: LikeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    userId: string
    firstName: string
    email: string
    imageUrl?: string | null
    bookReviews?: BookReviewUncheckedCreateNestedManyWithoutUserInput
    libraryTeam?: LibraryTeamUncheckedCreateNestedManyWithoutUserInput
    likes?: LikeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type BookReviewUpsertWithoutCommentsInput = {
    update: XOR<BookReviewUpdateWithoutCommentsInput, BookReviewUncheckedUpdateWithoutCommentsInput>
    create: XOR<BookReviewCreateWithoutCommentsInput, BookReviewUncheckedCreateWithoutCommentsInput>
    where?: BookReviewWhereInput
  }

  export type BookReviewUpdateToOneWithWhereWithoutCommentsInput = {
    where?: BookReviewWhereInput
    data: XOR<BookReviewUpdateWithoutCommentsInput, BookReviewUncheckedUpdateWithoutCommentsInput>
  }

  export type BookReviewUpdateWithoutCommentsInput = {
    bookName?: StringFieldUpdateOperationsInput | string
    bookDsc?: StringFieldUpdateOperationsInput | string
    bookType?: StringFieldUpdateOperationsInput | string
    bookReview?: StringFieldUpdateOperationsInput | string
    bookImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    presentAtLibrary?: BoolFieldUpdateOperationsInput | boolean
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviewByLcMember?: BoolFieldUpdateOperationsInput | boolean
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    isRejected?: BoolFieldUpdateOperationsInput | boolean
    likeCount?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutBookReviewsNestedInput
    rejectionMessages?: RejectionMessageUpdateManyWithoutBookReviewNestedInput
    likes?: LikeUpdateManyWithoutBookReviewNestedInput
  }

  export type BookReviewUncheckedUpdateWithoutCommentsInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    bookName?: StringFieldUpdateOperationsInput | string
    bookDsc?: StringFieldUpdateOperationsInput | string
    bookType?: StringFieldUpdateOperationsInput | string
    bookReview?: StringFieldUpdateOperationsInput | string
    bookImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    presentAtLibrary?: BoolFieldUpdateOperationsInput | boolean
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviewByLcMember?: BoolFieldUpdateOperationsInput | boolean
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    isRejected?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    rejectionMessages?: RejectionMessageUncheckedUpdateManyWithoutBookReviewNestedInput
    likes?: LikeUncheckedUpdateManyWithoutBookReviewNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviews?: BookReviewUpdateManyWithoutUserNestedInput
    libraryTeam?: LibraryTeamUpdateManyWithoutUserNestedInput
    likes?: LikeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviews?: BookReviewUncheckedUpdateManyWithoutUserNestedInput
    libraryTeam?: LibraryTeamUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutLikesInput = {
    userId: string
    firstName: string
    email: string
    imageUrl?: string | null
    bookReviews?: BookReviewCreateNestedManyWithoutUserInput
    libraryTeam?: LibraryTeamCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikesInput = {
    userId: string
    firstName: string
    email: string
    imageUrl?: string | null
    bookReviews?: BookReviewUncheckedCreateNestedManyWithoutUserInput
    libraryTeam?: LibraryTeamUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
  }

  export type BookReviewCreateWithoutLikesInput = {
    bookName: string
    bookDsc: string
    bookType: string
    bookReview: string
    bookImageUrl?: string | null
    presentAtLibrary: boolean
    referenceNumber?: string | null
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    likeCount?: number
    user: UserCreateNestedOneWithoutBookReviewsInput
    rejectionMessages?: RejectionMessageCreateNestedManyWithoutBookReviewInput
    comments?: CommentCreateNestedManyWithoutBookReviewInput
  }

  export type BookReviewUncheckedCreateWithoutLikesInput = {
    reviewId?: number
    bookName: string
    bookDsc: string
    bookType: string
    bookReview: string
    bookImageUrl?: string | null
    presentAtLibrary: boolean
    referenceNumber?: string | null
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    userId: string
    likeCount?: number
    rejectionMessages?: RejectionMessageUncheckedCreateNestedManyWithoutBookReviewInput
    comments?: CommentUncheckedCreateNestedManyWithoutBookReviewInput
  }

  export type BookReviewCreateOrConnectWithoutLikesInput = {
    where: BookReviewWhereUniqueInput
    create: XOR<BookReviewCreateWithoutLikesInput, BookReviewUncheckedCreateWithoutLikesInput>
  }

  export type UserUpsertWithoutLikesInput = {
    update: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateWithoutLikesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviews?: BookReviewUpdateManyWithoutUserNestedInput
    libraryTeam?: LibraryTeamUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviews?: BookReviewUncheckedUpdateManyWithoutUserNestedInput
    libraryTeam?: LibraryTeamUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookReviewUpsertWithoutLikesInput = {
    update: XOR<BookReviewUpdateWithoutLikesInput, BookReviewUncheckedUpdateWithoutLikesInput>
    create: XOR<BookReviewCreateWithoutLikesInput, BookReviewUncheckedCreateWithoutLikesInput>
    where?: BookReviewWhereInput
  }

  export type BookReviewUpdateToOneWithWhereWithoutLikesInput = {
    where?: BookReviewWhereInput
    data: XOR<BookReviewUpdateWithoutLikesInput, BookReviewUncheckedUpdateWithoutLikesInput>
  }

  export type BookReviewUpdateWithoutLikesInput = {
    bookName?: StringFieldUpdateOperationsInput | string
    bookDsc?: StringFieldUpdateOperationsInput | string
    bookType?: StringFieldUpdateOperationsInput | string
    bookReview?: StringFieldUpdateOperationsInput | string
    bookImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    presentAtLibrary?: BoolFieldUpdateOperationsInput | boolean
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviewByLcMember?: BoolFieldUpdateOperationsInput | boolean
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    isRejected?: BoolFieldUpdateOperationsInput | boolean
    likeCount?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutBookReviewsNestedInput
    rejectionMessages?: RejectionMessageUpdateManyWithoutBookReviewNestedInput
    comments?: CommentUpdateManyWithoutBookReviewNestedInput
  }

  export type BookReviewUncheckedUpdateWithoutLikesInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    bookName?: StringFieldUpdateOperationsInput | string
    bookDsc?: StringFieldUpdateOperationsInput | string
    bookType?: StringFieldUpdateOperationsInput | string
    bookReview?: StringFieldUpdateOperationsInput | string
    bookImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    presentAtLibrary?: BoolFieldUpdateOperationsInput | boolean
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviewByLcMember?: BoolFieldUpdateOperationsInput | boolean
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    isRejected?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    likeCount?: IntFieldUpdateOperationsInput | number
    rejectionMessages?: RejectionMessageUncheckedUpdateManyWithoutBookReviewNestedInput
    comments?: CommentUncheckedUpdateManyWithoutBookReviewNestedInput
  }

  export type BookReviewCreateManyUserInput = {
    reviewId?: number
    bookName: string
    bookDsc: string
    bookType: string
    bookReview: string
    bookImageUrl?: string | null
    presentAtLibrary: boolean
    referenceNumber?: string | null
    bookReviewByLcMember?: boolean
    isValidated?: boolean
    isRejected?: boolean
    likeCount?: number
  }

  export type LibraryTeamCreateManyUserInput = {
    id?: number
  }

  export type CommentCreateManyUserInput = {
    id?: number
    message: string
    bookReviewId: number
  }

  export type LikeCreateManyUserInput = {
    id?: number
    bookReviewId: number
  }

  export type BookReviewUpdateWithoutUserInput = {
    bookName?: StringFieldUpdateOperationsInput | string
    bookDsc?: StringFieldUpdateOperationsInput | string
    bookType?: StringFieldUpdateOperationsInput | string
    bookReview?: StringFieldUpdateOperationsInput | string
    bookImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    presentAtLibrary?: BoolFieldUpdateOperationsInput | boolean
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviewByLcMember?: BoolFieldUpdateOperationsInput | boolean
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    isRejected?: BoolFieldUpdateOperationsInput | boolean
    likeCount?: IntFieldUpdateOperationsInput | number
    rejectionMessages?: RejectionMessageUpdateManyWithoutBookReviewNestedInput
    comments?: CommentUpdateManyWithoutBookReviewNestedInput
    likes?: LikeUpdateManyWithoutBookReviewNestedInput
  }

  export type BookReviewUncheckedUpdateWithoutUserInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    bookName?: StringFieldUpdateOperationsInput | string
    bookDsc?: StringFieldUpdateOperationsInput | string
    bookType?: StringFieldUpdateOperationsInput | string
    bookReview?: StringFieldUpdateOperationsInput | string
    bookImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    presentAtLibrary?: BoolFieldUpdateOperationsInput | boolean
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviewByLcMember?: BoolFieldUpdateOperationsInput | boolean
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    isRejected?: BoolFieldUpdateOperationsInput | boolean
    likeCount?: IntFieldUpdateOperationsInput | number
    rejectionMessages?: RejectionMessageUncheckedUpdateManyWithoutBookReviewNestedInput
    comments?: CommentUncheckedUpdateManyWithoutBookReviewNestedInput
    likes?: LikeUncheckedUpdateManyWithoutBookReviewNestedInput
  }

  export type BookReviewUncheckedUpdateManyWithoutUserInput = {
    reviewId?: IntFieldUpdateOperationsInput | number
    bookName?: StringFieldUpdateOperationsInput | string
    bookDsc?: StringFieldUpdateOperationsInput | string
    bookType?: StringFieldUpdateOperationsInput | string
    bookReview?: StringFieldUpdateOperationsInput | string
    bookImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    presentAtLibrary?: BoolFieldUpdateOperationsInput | boolean
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bookReviewByLcMember?: BoolFieldUpdateOperationsInput | boolean
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    isRejected?: BoolFieldUpdateOperationsInput | boolean
    likeCount?: IntFieldUpdateOperationsInput | number
  }

  export type LibraryTeamUpdateWithoutUserInput = {
    rejectionMessages?: RejectionMessageUpdateManyWithoutLibraryTeamNestedInput
  }

  export type LibraryTeamUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    rejectionMessages?: RejectionMessageUncheckedUpdateManyWithoutLibraryTeamNestedInput
  }

  export type LibraryTeamUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    bookReview?: BookReviewUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    bookReviewId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    bookReviewId?: IntFieldUpdateOperationsInput | number
  }

  export type LikeUpdateWithoutUserInput = {
    bookReview?: BookReviewUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookReviewId?: IntFieldUpdateOperationsInput | number
  }

  export type LikeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookReviewId?: IntFieldUpdateOperationsInput | number
  }

  export type RejectionMessageCreateManyBookReviewInput = {
    id?: number
    message: string
    libraryTeamId: number
  }

  export type CommentCreateManyBookReviewInput = {
    id?: number
    message: string
    userId: string
  }

  export type LikeCreateManyBookReviewInput = {
    id?: number
    userId: string
  }

  export type RejectionMessageUpdateWithoutBookReviewInput = {
    message?: StringFieldUpdateOperationsInput | string
    libraryTeam?: LibraryTeamUpdateOneRequiredWithoutRejectionMessagesNestedInput
  }

  export type RejectionMessageUncheckedUpdateWithoutBookReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    libraryTeamId?: IntFieldUpdateOperationsInput | number
  }

  export type RejectionMessageUncheckedUpdateManyWithoutBookReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    libraryTeamId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutBookReviewInput = {
    message?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutBookReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutBookReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LikeUpdateWithoutBookReviewInput = {
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikeUncheckedUpdateWithoutBookReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LikeUncheckedUpdateManyWithoutBookReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type RejectionMessageCreateManyLibraryTeamInput = {
    id?: number
    message: string
    bookReviewId: number
  }

  export type RejectionMessageUpdateWithoutLibraryTeamInput = {
    message?: StringFieldUpdateOperationsInput | string
    bookReview?: BookReviewUpdateOneRequiredWithoutRejectionMessagesNestedInput
  }

  export type RejectionMessageUncheckedUpdateWithoutLibraryTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    bookReviewId?: IntFieldUpdateOperationsInput | number
  }

  export type RejectionMessageUncheckedUpdateManyWithoutLibraryTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    bookReviewId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookReviewCountOutputTypeDefaultArgs instead
     */
    export type BookReviewCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookReviewCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LibraryTeamCountOutputTypeDefaultArgs instead
     */
    export type LibraryTeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LibraryTeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookReviewDefaultArgs instead
     */
    export type BookReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookReviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LibraryTeamDefaultArgs instead
     */
    export type LibraryTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LibraryTeamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RejectionMessageDefaultArgs instead
     */
    export type RejectionMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RejectionMessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LikeDefaultArgs instead
     */
    export type LikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LikeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}